sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.7685
Branch Predictor Power Consumption: 4.52617  (7.45%)
 branch target buffer power (W): 4.16837
 TBIT power (W): 0.00304519
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.132%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.599%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.58%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.882%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.841%)
Total Clock Power: 21.873  (36%)
Int ALU Power: 4.66013  (7.67%)
FP ALU Power: 14.281  (23.5%)
Instruction Cache Power Consumption: 2.21363  (3.64%)
 tet_power (W): 0.0333148
 htb_power (W): 0.0720937
 trc_power (W): 0.203425
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.433%)
Data Cache Power Consumption: 5.18303  (8.53%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.48%)
Level 2 Cache Power Consumption: 4.2091 (6.93%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: /home/jaikrishna/Study/ca/project/sim-wattch-1.02e-final/sim-outorder -max:inst 100000000 -redir:sim trcnottaken/out1.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred nottaken -fetch:mplat 1 ../automotive/matmult50 

sim: simulation started @ Wed Dec  9 01:16:44 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     trcnottaken/out1.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred               nottaken # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:trc       trc:2048:512 # TRC cache config, i.e., {<config>|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               13291896 # total number of instructions committed
sim_num_refs                2820395 # total number of loads and stores committed
sim_num_loads               2236633 # total number of loads committed
sim_num_stores          583762.0000 # total number of stores committed
sim_num_branches            1148240 # total number of branches committed
sim_elapsed_time                  9 # total simulation time in seconds
sim_inst_rate          1476877.3333 # simulation speed (in insts/sec)
sim_total_insn             13291895 # total number of instructions executed
sim_total_refs              2820395 # total number of loads and stores executed
sim_total_loads             2236633 # total number of loads executed
sim_total_stores        583762.0000 # total number of stores executed
sim_total_branches          1148240 # total number of branches executed
sim_cycle                  21361471 # total simulation time in cycles
sim_IPC                      0.6222 # instructions per cycle
sim_CPI                      1.6071 # cycles per instruction
sim_exec_BW                  0.6222 # total instructions (mis-spec + committed) per cycle
sim_IPB                     11.5759 # instruction per branch
IFQ_count                  18988496 # cumulative IFQ occupancy
IFQ_fcount                 18988496 # cumulative IFQ full count
ifq_occupancy                0.8889 # avg IFQ occupancy (insn's)
ifq_rate                     0.6222 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.4286 # avg IFQ occupant latency (cycle's)
ifq_full                     0.8889 # fraction of time (cycle's) IFQ was full
RUU_count                  46488315 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                2.1763 # avg RUU occupancy (insn's)
ruu_rate                     0.6222 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.4975 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                  10704224 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                0.5011 # avg LSQ occupancy (insn's)
lsq_rate                     0.6222 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.8053 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   73302274 # total number of slip cycles
avg_sim_slip                 5.5148 # the average slip between issue and retirement
bpred_nottaken.lookups      1340166 # total number of bpred lookups
bpred_nottaken.updates      1148240 # total number of updates
bpred_nottaken.addr_hits       322015 # total number of address-predicted hits
bpred_nottaken.dir_hits       322015 # total number of direction-predicted hits (includes addr-hits)
bpred_nottaken.misses        826225 # total number of misses
bpred_nottaken.jr_hits         2500 # total number of address-predicted hits for JR's
bpred_nottaken.jr_seen        63316 # total number of JR's seen
bpred_nottaken.jr_non_ras_hits.PP         2500 # total number of address-predicted hits for non-RAS JR's
bpred_nottaken.jr_non_ras_seen.PP        63316 # total number of non-RAS JR's seen
bpred_nottaken.bpred_addr_rate    0.2804 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_nottaken.bpred_dir_rate    0.2804 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_nottaken.bpred_jr_rate    0.0395 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_nottaken.bpred_jr_non_ras_rate.PP    0.0395 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_nottaken.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_nottaken.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_nottaken.used_ras.PP            0 # total number of RAS predictions used
bpred_nottaken.ras_hits.PP            0 # total number of RAS hits
bpred_nottaken.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               13451769 # total number of accesses
il1.hits                   13171073 # total number of hits
il1.misses                   280696 # total number of misses
il1.replacements             280358 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0209 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0208 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                2820395 # total number of accesses
dl1.hits                    2818711 # total number of hits
dl1.misses                     1684 # total number of misses
dl1.replacements               1172 # total number of replacements
dl1.writebacks                  838 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0004 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0003 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 283218 # total number of accesses
ul2.hits                     282428 # total number of hits
ul2.misses                      790 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0028 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              13451769 # total number of accesses
itlb.hits                  13451757 # total number of hits
itlb.misses                      12 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               2820395 # total number of accesses
dtlb.hits                   2820384 # total number of hits
dtlb.misses                      11 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
TRC.accesses                1578673 # total number of accesses
TRC.hits                     911829 # total number of hits
TRC.misses                   666844 # total number of misses
TRC.tetaccesses            12784925 # total number of TET accesses
rename_power           1709789.0124 # total power usage of rename unit
bpred_power            96620633.3074 # total power usage of bpred unit
window_power           7770558.0775 # total power usage of instruction window
lsq_power              20574941.3646 # total power usage of load/store queue
regfile_power          11449167.5818 # total power usage of arch. regfile
trc_power               852040.3483 # total power usage of trc
icache_power           48087805.0808 # total power usage of icache
dcache_power           129982548.8017 # total power usage of dcache
dcache2_power          89912470.2649 # total power usage of dcache2
alu_power              404611369.0392 # total power usage of alu
falu_power             305064127.6237 # total power usage of falu
resultbus_power        10912008.5838 # total power usage of resultbus
clock_power            467238807.6581 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_trc_power                0.0399 # avg power usage of trc
avg_icache_power             2.2511 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.8730 # avg power usage of clock
fetch_stage_power      145560478.7365 # total power usage of fetch stage
dispatch_stage_power   1709789.0124 # total power usage of dispatch stage
issue_stage_power      663763896.1318 # total power usage of issue stage
avg_fetch_power              6.8142 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            1289722139.1207 # total power per cycle
avg_total_power_cycle       60.3761 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.8860 # average total power per cycle
avg_total_power_insn        97.0307 # average total power per insn
avg_total_power_insn_nofp_nod2      67.3151 # average total power per insn
rename_power_cc1       1063689.2710 # total power usage of rename unit_cc1
bpred_power_cc1           3496.6111 # total power usage of bpred unit_cc1
window_power_cc1       6945152.4031 # total power usage of instruction window_cc1
lsq_power_cc1          1422256.1919 # total power usage of lsq_cc1
regfile_power_cc1      6596056.6669 # total power usage of arch. regfile_cc1
icache_power_cc1       33319248.0516 # total power usage of icache_cc1
dcache_power_cc1       17159958.9897 # total power usage of dcache_cc1
dcache2_power_cc1      1188520.1761 # total power usage of dcache2_cc1
alu_power_cc1          60581337.0991 # total power usage of alu_cc1
resultbus_power_cc1    5850087.9105 # total power usage of resultbus_cc1
clock_power_cc1        97705942.3139 # total power usage of clock_cc1
avg_rename_power_cc1         0.0498 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.0002 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.3251 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0666 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.3088 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.5598 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.8033 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0556 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.8360 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2739 # avg power usage of resultbus_cc1
avg_clock_power_cc1          4.5739 # avg power usage of clock_cc1
fetch_stage_power_cc1  33322744.6627 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 1063689.2710 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  93147312.7703 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.5599 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0498 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.3605 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  231835745.6849 # total power per cycle_cc1
avg_total_power_cycle_cc1      10.8530 # average total power per cycle_cc1
avg_total_power_insn_cc1      17.4419 # average total power per insn_cc1
rename_power_cc2       1063689.2710 # total power usage of rename unit_cc2
bpred_power_cc2        2596817.3265 # total power usage of bpred unit_cc2
window_power_cc2       6691410.7137 # total power usage of instruction window_cc2
lsq_power_cc2           711128.0959 # total power usage of lsq_cc2
regfile_power_cc2      3141086.5828 # total power usage of arch. regfile_cc2
icache_power_cc2       33319248.0516 # total power usage of icache_cc2
dcache_power_cc2       8580919.6129 # total power usage of dcache_cc2
dcache2_power_cc2       596045.7968 # total power usage of dcache2_cc2
alu_power_cc2          15145334.2748 # total power usage of alu_cc2
resultbus_power_cc2    5850087.9105 # total power usage of resultbus_cc2
clock_power_cc2        55933674.9596 # total power usage of clock_cc2
avg_rename_power_cc2         0.0498 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.1216 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.3132 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0333 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1470 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.5598 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.4017 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0279 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.7090 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2739 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.6184 # avg power usage of clock_cc2
fetch_stage_power_cc2  35916065.3781 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 1063689.2710 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  37574926.4045 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.6813 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0498 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.7590 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  133629442.5960 # total power per cycle_cc2
avg_total_power_cycle_cc2       6.2556 # average total power per cycle_cc2
avg_total_power_insn_cc2      10.0535 # average total power per insn_cc2
rename_power_cc3       1128299.2452 # total power usage of rename unit_cc3
bpred_power_cc3        11745672.5153 # total power usage of bpred unit_cc3
window_power_cc3       6851404.8472 # total power usage of instruction window_cc3
lsq_power_cc3          2620164.2385 # total power usage of lsq_cc3
regfile_power_cc3      3513035.7928 # total power usage of arch. regfile_cc3
icache_power_cc3       35278435.1422 # total power usage of icache_cc3
dcache_power_cc3       19863178.6020 # total power usage of dcache_cc3
dcache2_power_cc3      9468441.8589 # total power usage of dcache2_cc3
alu_power_cc3          49548337.4707 # total power usage of alu_cc3
resultbus_power_cc3    6206851.9452 # total power usage of resultbus_cc3
clock_power_cc3        92663147.1103 # total power usage of clock_cc3
avg_rename_power_cc3         0.0528 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.5499 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.3207 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1227 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1645 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.6515 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9299 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4432 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.3195 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2906 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.3379 # avg power usage of clock_cc3
fetch_stage_power_cc3  47024107.6575 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 1128299.2452 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  94558378.9625 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.2014 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0528 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.4266 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  238886968.7683 # total power per cycle_cc3
avg_total_power_cycle_cc3      11.1831 # average total power per cycle_cc3
avg_total_power_insn_cc3      17.9724 # average total power per insn_cc3
total_rename_access        13289340 # total number accesses of rename unit
total_bpred_access          1148240 # total number accesses of bpred unit
total_window_access        48838794 # total number accesses of instruction window
total_lsq_access            2820395 # total number accesses of load/store queue
total_regfile_access       20591823 # total number accesses of arch. regfile
total_icache_access        13451769 # total number accesses of icache
total_trc_access             911829 # total number accesses of trc
total_dcache_access         2820395 # total number accesses of dcache
total_dcache2_access         283218 # total number accesses of dcache2
total_alu_access           12999923 # total number accesses of alu
total_resultbus_access     14377733 # total number accesses of resultbus
avg_rename_access            0.6221 # avg number accesses of rename unit
avg_bpred_access             0.0538 # avg number accesses of bpred unit
avg_window_access            2.2863 # avg number accesses of instruction window
avg_lsq_access               0.1320 # avg number accesses of lsq
avg_regfile_access           0.9640 # avg number accesses of arch. regfile
avg_icache_access            0.6297 # avg number accesses of icache
avg_trc_access               0.0427 # avg number accesses of trc
avg_dcache_access            0.1320 # avg number accesses of dcache
avg_dcache2_access           0.0133 # avg number accesses of dcache2
avg_alu_access               0.6086 # avg number accesses of alu
avg_resultbus_access         0.6731 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 4 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_trc_access                    1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         19.0728 # maximum cycle power usage of cc1
max_cycle_power_cc2         13.1734 # maximum cycle power usage of cc2
max_cycle_power_cc3         17.2569 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  73616 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                   8336 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   29 # total number of pages allocated
mem.page_mem                   116k # total size of memory pages allocated
mem.ptab_misses                  29 # total first level page table misses
mem.ptab_accesses          75968630 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

