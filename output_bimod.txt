sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred bimod -fetch:mplat 1 ../automotive/basicmath/basicmath_small 

sim: simulation started @ Thu Nov  5 20:19:40 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                2524436 # total number of loads and stores committed
sim_num_loads               1539041 # total number of loads committed
sim_num_stores          985395.0000 # total number of stores committed
sim_num_branches            1678895 # total number of branches committed
sim_elapsed_time                  7 # total simulation time in seconds
sim_inst_rate          1428571.4286 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              2524436 # total number of loads and stores executed
sim_total_loads             1539041 # total number of loads executed
sim_total_stores        985395.0000 # total number of stores executed
sim_total_branches          1678895 # total number of branches executed
sim_cycle                  18441437 # total simulation time in cycles
sim_IPC                      0.5423 # instructions per cycle
sim_CPI                      1.8441 # cycles per instruction
sim_exec_BW                  0.5423 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.9563 # instruction per branch
IFQ_count                  13475012 # cumulative IFQ occupancy
IFQ_fcount                 13475012 # cumulative IFQ full count
ifq_occupancy                0.7307 # avg IFQ occupancy (insn's)
ifq_rate                     0.5423 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3475 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7307 # fraction of time (cycle's) IFQ was full
RUU_count                  35302319 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                1.9143 # avg RUU occupancy (insn's)
ruu_rate                     0.5423 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.5302 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                   9262813 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                0.5023 # avg LSQ occupancy (insn's)
lsq_rate                     0.5423 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.9263 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   57089551 # total number of slip cycles
avg_sim_slip                 5.7090 # the average slip between issue and retirement
bpred_bimod.lookups         1681531 # total number of bpred lookups
bpred_bimod.updates         1678894 # total number of updates
bpred_bimod.addr_hits       1527349 # total number of address-predicted hits
bpred_bimod.dir_hits        1527934 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           150960 # total number of misses
bpred_bimod.jr_hits          185225 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen          185799 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         2201 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         2768 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9097 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9101 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9969 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.7952 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes       183041 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops       183032 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP       183031 # total number of RAS predictions used
bpred_bimod.ras_hits.PP       183024 # total number of RAS hits
bpred_bimod.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               10938118 # total number of accesses
il1.hits                   10127394 # total number of hits
il1.misses                   810724 # total number of misses
il1.replacements             810241 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0741 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0741 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                2524434 # total number of accesses
dl1.hits                    2523800 # total number of hits
dl1.misses                      634 # total number of misses
dl1.replacements                122 # total number of replacements
dl1.writebacks                  116 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0003 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 811474 # total number of accesses
ul2.hits                     810485 # total number of hits
ul2.misses                      989 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0012 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              10938118 # total number of accesses
itlb.hits                  10938097 # total number of hits
itlb.misses                      21 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               2524435 # total number of accesses
dtlb.hits                   2524425 # total number of hits
dtlb.misses                      10 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1476067.1845 # total power usage of rename unit
bpred_power            83412950.4519 # total power usage of bpred unit
window_power           6708351.5576 # total power usage of instruction window
lsq_power              17762423.0546 # total power usage of load/store queue
regfile_power          9884108.7607 # total power usage of arch. regfile
icache_power           45678364.9624 # total power usage of icache
dcache_power           112214415.6207 # total power usage of dcache
dcache2_power          77621768.4468 # total power usage of dcache2
alu_power              349302492.8677 # total power usage of alu
falu_power             263362990.7849 # total power usage of falu
resultbus_power        9420377.4111 # total power usage of resultbus
clock_power            398070299.9037 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      129091315.4143 # total power usage of fetch stage
dispatch_stage_power   1476067.1845 # total power usage of dispatch stage
issue_stage_power      573029828.9586 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            1111551620.2218 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn       111.1552 # average total power per insn
avg_total_power_insn_nofp_nod2      77.0567 # average total power per insn
rename_power_cc1        800407.4188 # total power usage of rename unit_cc1
bpred_power_cc1        7593849.7677 # total power usage of bpred unit_cc1
window_power_cc1       5399515.4784 # total power usage of instruction window_cc1
lsq_power_cc1          1130262.3667 # total power usage of lsq_cc1
regfile_power_cc1      5448254.9923 # total power usage of arch. regfile_cc1
icache_power_cc1       27093105.7531 # total power usage of icache_cc1
dcache_power_cc1       15358102.6291 # total power usage of dcache_cc1
dcache2_power_cc1      3414980.1387 # total power usage of dcache2_cc1
alu_power_cc1          46772652.8975 # total power usage of alu_cc1
resultbus_power_cc1    4284996.0962 # total power usage of resultbus_cc1
clock_power_cc1        70880398.3528 # total power usage of clock_cc1
avg_rename_power_cc1         0.0434 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.4118 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.2928 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0613 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.2954 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.4691 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.8328 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1852 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.5363 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2324 # avg power usage of resultbus_cc1
avg_clock_power_cc1          3.8435 # avg power usage of clock_cc1
fetch_stage_power_cc1  34686955.5208 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800407.4188 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  76360509.6066 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.8809 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0434 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.1407 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  188176525.8913 # total power per cycle_cc1
avg_total_power_cycle_cc1      10.2040 # average total power per cycle_cc1
avg_total_power_insn_cc1      18.8177 # average total power per insn_cc1
rename_power_cc2        800407.4188 # total power usage of rename unit_cc2
bpred_power_cc2        3796924.8839 # total power usage of bpred unit_cc2
window_power_cc2       5083004.4289 # total power usage of instruction window_cc2
lsq_power_cc2           565131.1833 # total power usage of lsq_cc2
regfile_power_cc2      2676396.3224 # total power usage of arch. regfile_cc2
icache_power_cc2       27093105.7531 # total power usage of icache_cc2
dcache_power_cc2       7680472.1402 # total power usage of dcache_cc2
dcache2_power_cc2      1707785.7583 # total power usage of dcache2_cc2
alu_power_cc2          11693163.2244 # total power usage of alu_cc2
resultbus_power_cc2    4284996.0962 # total power usage of resultbus_cc2
clock_power_cc2        39626310.2010 # total power usage of clock_cc2
avg_rename_power_cc2         0.0434 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2059 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.2756 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0306 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1451 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.4691 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.4165 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0926 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.6341 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2324 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.1488 # avg power usage of clock_cc2
fetch_stage_power_cc2  30890030.6369 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800407.4188 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  31014552.8313 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.6750 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0434 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.6818 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  105007697.4104 # total power per cycle_cc2
avg_total_power_cycle_cc2       5.6941 # average total power per cycle_cc2
avg_total_power_insn_cc2      10.5008 # average total power per insn_cc2
rename_power_cc3        867973.3954 # total power usage of rename unit_cc3
bpred_power_cc3        11378834.9535 # total power usage of bpred unit_cc3
window_power_cc3       5259256.7887 # total power usage of instruction window_cc3
lsq_power_cc3          2215568.4468 # total power usage of lsq_cc3
regfile_power_cc3      3018621.0701 # total power usage of arch. regfile_cc3
icache_power_cc3       28951631.6700 # total power usage of icache_cc3
dcache_power_cc3       17366103.4451 # total power usage of dcache_cc3
dcache2_power_cc3      9128465.6435 # total power usage of dcache2_cc3
alu_power_cc3          41946147.2229 # total power usage of alu_cc3
resultbus_power_cc3    4724965.2629 # total power usage of resultbus_cc3
clock_power_cc3        72256953.4692 # total power usage of clock_cc3
avg_rename_power_cc3         0.0471 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6170 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.2852 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1201 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1637 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.5699 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9417 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4950 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.2746 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2562 # avg power usage of resultbus_cc3
avg_clock_power_cc3          3.9182 # avg power usage of clock_cc3
fetch_stage_power_cc3  40330466.6235 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  867973.3954 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  80640506.8098 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.1869 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0471 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.3728 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  197114521.3680 # total power per cycle_cc3
avg_total_power_cycle_cc3      10.6887 # average total power per cycle_cc3
avg_total_power_insn_cc3      19.7115 # average total power per insn_cc3
total_rename_access         9999994 # total number accesses of rename unit
total_bpred_access          1678894 # total number accesses of bpred unit
total_window_access        39010161 # total number accesses of instruction window
total_lsq_access            2524436 # total number accesses of load/store queue
total_regfile_access       17934375 # total number accesses of arch. regfile
total_icache_access        10938128 # total number accesses of icache
total_dcache_access         2524434 # total number accesses of dcache
total_dcache2_access         811474 # total number accesses of dcache2
total_alu_access            9723233 # total number accesses of alu
total_resultbus_access      9860138 # total number accesses of resultbus
avg_rename_access            0.5423 # avg number accesses of rename unit
avg_bpred_access             0.0910 # avg number accesses of bpred unit
avg_window_access            2.1154 # avg number accesses of instruction window
avg_lsq_access               0.1369 # avg number accesses of lsq
avg_regfile_access           0.9725 # avg number accesses of arch. regfile
avg_icache_access            0.5931 # avg number accesses of icache
avg_dcache_access            0.1369 # avg number accesses of dcache
avg_dcache2_access           0.0440 # avg number accesses of dcache2
avg_alu_access               0.5272 # avg number accesses of alu
avg_resultbus_access         0.5347 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 7 # max number accesses of instruction window
max_lsq_access                    2 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              4 # max number accesses of resultbus
max_cycle_power_cc1         27.7680 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.5305 # maximum cycle power usage of cc2
max_cycle_power_cc3         16.6845 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  91008 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12848 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   33 # total number of pages allocated
mem.page_mem                   132k # total size of memory pages allocated
mem.ptab_misses                  37 # total first level page table misses
mem.ptab_accesses          62390752 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred bimod -fetch:mplat 1 ../automotive/basicmath/basicmath_large 

sim: simulation started @ Thu Nov  5 20:19:47 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                2527609 # total number of loads and stores committed
sim_num_loads               1540310 # total number of loads committed
sim_num_stores          987299.0000 # total number of stores committed
sim_num_branches            1678165 # total number of branches committed
sim_elapsed_time                  7 # total simulation time in seconds
sim_inst_rate          1428571.4286 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              2527609 # total number of loads and stores executed
sim_total_loads             1540310 # total number of loads executed
sim_total_stores        987299.0000 # total number of stores executed
sim_total_branches          1678165 # total number of branches executed
sim_cycle                  18487320 # total simulation time in cycles
sim_IPC                      0.5409 # instructions per cycle
sim_CPI                      1.8487 # cycles per instruction
sim_exec_BW                  0.5409 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.9589 # instruction per branch
IFQ_count                  13502130 # cumulative IFQ occupancy
IFQ_fcount                 13502130 # cumulative IFQ full count
ifq_occupancy                0.7303 # avg IFQ occupancy (insn's)
ifq_rate                     0.5409 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3502 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7303 # fraction of time (cycle's) IFQ was full
RUU_count                  35280661 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                1.9084 # avg RUU occupancy (insn's)
ruu_rate                     0.5409 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.5281 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                   9302297 # cumulative LSQ occupancy
LSQ_fcount                       11 # cumulative LSQ full count
lsq_occupancy                0.5032 # avg LSQ occupancy (insn's)
lsq_rate                     0.5409 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.9302 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   57110556 # total number of slip cycles
avg_sim_slip                 5.7111 # the average slip between issue and retirement
bpred_bimod.lookups         1680838 # total number of bpred lookups
bpred_bimod.updates         1678165 # total number of updates
bpred_bimod.addr_hits       1525818 # total number of address-predicted hits
bpred_bimod.dir_hits        1526219 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses           151946 # total number of misses
bpred_bimod.jr_hits          185401 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen          185893 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP         2258 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP         2743 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9092 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9095 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9974 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8232 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes       183159 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops       183150 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP       183150 # total number of RAS predictions used
bpred_bimod.ras_hits.PP       183143 # total number of RAS hits
bpred_bimod.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               10941910 # total number of accesses
il1.hits                   10127561 # total number of hits
il1.misses                   814349 # total number of misses
il1.replacements             813868 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0744 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0744 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                2527609 # total number of accesses
dl1.hits                    2526967 # total number of hits
dl1.misses                      642 # total number of misses
dl1.replacements                130 # total number of replacements
dl1.writebacks                  125 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0003 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 815116 # total number of accesses
ul2.hits                     814109 # total number of hits
ul2.misses                     1007 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0012 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              10941910 # total number of accesses
itlb.hits                  10941888 # total number of hits
itlb.misses                      22 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               2527609 # total number of accesses
dtlb.hits                   2527599 # total number of hits
dtlb.misses                      10 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1479739.6961 # total power usage of rename unit
bpred_power            83620485.0602 # total power usage of bpred unit
window_power           6725042.1927 # total power usage of instruction window
lsq_power              17806616.6420 # total power usage of load/store queue
regfile_power          9908700.8010 # total power usage of arch. regfile
icache_power           45792014.4800 # total power usage of icache
dcache_power           112493609.3748 # total power usage of dcache
dcache2_power          77814894.3732 # total power usage of dcache2
alu_power              350171570.8186 # total power usage of alu
falu_power             264018247.9708 # total power usage of falu
resultbus_power        9443815.6701 # total power usage of resultbus
clock_power            399060714.0214 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      129412499.5402 # total power usage of fetch stage
dispatch_stage_power   1479739.6961 # total power usage of dispatch stage
issue_stage_power      574455549.0715 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            1114317203.1301 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn       111.4317 # average total power per insn
avg_total_power_insn_nofp_nod2      77.2484 # average total power per insn
rename_power_cc1        800407.4188 # total power usage of rename unit_cc1
bpred_power_cc1        7590552.4086 # total power usage of bpred unit_cc1
window_power_cc1       5389521.6752 # total power usage of instruction window_cc1
lsq_power_cc1          1133392.2144 # total power usage of lsq_cc1
regfile_power_cc1      5438943.2958 # total power usage of arch. regfile_cc1
icache_power_cc1       27102498.3161 # total power usage of icache_cc1
dcache_power_cc1       15377416.1217 # total power usage of dcache_cc1
dcache2_power_cc1      3430280.2007 # total power usage of dcache2_cc1
alu_power_cc1          46752192.6699 # total power usage of alu_cc1
resultbus_power_cc1    4286570.4080 # total power usage of resultbus_cc1
clock_power_cc1        70840874.6198 # total power usage of clock_cc1
avg_rename_power_cc1         0.0433 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.4106 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.2915 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0613 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.2942 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.4660 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.8318 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1855 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.5289 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2319 # avg power usage of resultbus_cc1
avg_clock_power_cc1          3.8319 # avg power usage of clock_cc1
fetch_stage_power_cc1  34693050.7247 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800407.4188 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  76369373.2899 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.8766 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0433 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.1309 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  188142649.3490 # total power per cycle_cc1
avg_total_power_cycle_cc1      10.1768 # average total power per cycle_cc1
avg_total_power_insn_cc1      18.8143 # average total power per insn_cc1
rename_power_cc2        800407.4188 # total power usage of rename unit_cc2
bpred_power_cc2        3795276.2043 # total power usage of bpred unit_cc2
window_power_cc2       5085390.0418 # total power usage of instruction window_cc2
lsq_power_cc2           566696.1072 # total power usage of lsq_cc2
regfile_power_cc2      2681295.7579 # total power usage of arch. regfile_cc2
icache_power_cc2       27102498.3161 # total power usage of icache_cc2
dcache_power_cc2       7690131.9289 # total power usage of dcache_cc2
dcache2_power_cc2      1715450.5211 # total power usage of dcache2_cc2
alu_power_cc2          11688048.1675 # total power usage of alu_cc2
resultbus_power_cc2    4286570.4080 # total power usage of resultbus_cc2
clock_power_cc2        39619014.9010 # total power usage of clock_cc2
avg_rename_power_cc2         0.0433 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2053 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.2751 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0307 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1450 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.4660 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.4160 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0928 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.6322 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2319 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.1430 # avg power usage of clock_cc2
fetch_stage_power_cc2  30897774.5204 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800407.4188 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  31032287.1745 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.6713 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0433 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.6786 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  105030779.7726 # total power per cycle_cc2
avg_total_power_cycle_cc2       5.6812 # average total power per cycle_cc2
avg_total_power_insn_cc2      10.5031 # average total power per insn_cc2
rename_power_cc3        868340.6466 # total power usage of rename unit_cc3
bpred_power_cc3        11398269.4707 # total power usage of bpred unit_cc3
window_power_cc3       5264525.5793 # total power usage of instruction window_cc3
lsq_power_cc3          2221404.7580 # total power usage of lsq_cc3
regfile_power_cc3      3027393.2307 # total power usage of arch. regfile_cc3
icache_power_cc3       28971449.9285 # total power usage of icache_cc3
dcache_power_cc3       17401751.2600 # total power usage of dcache_cc3
dcache2_power_cc3      9153912.5718 # total power usage of dcache2_cc3
alu_power_cc3          42029985.9839 # total power usage of alu_cc3
resultbus_power_cc3    4729280.9770 # total power usage of resultbus_cc3
clock_power_cc3        72353676.9381 # total power usage of clock_cc3
avg_rename_power_cc3         0.0470 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6165 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.2848 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1202 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1638 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.5671 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9413 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4951 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.2734 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2558 # avg power usage of resultbus_cc3
avg_clock_power_cc3          3.9137 # avg power usage of clock_cc3
fetch_stage_power_cc3  40369719.3992 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  868340.6466 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  80800861.1301 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.1836 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0470 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.3706 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  197419991.3446 # total power per cycle_cc3
avg_total_power_cycle_cc3      10.6787 # average total power per cycle_cc3
avg_total_power_insn_cc3      19.7420 # average total power per insn_cc3
total_rename_access         9999994 # total number accesses of rename unit
total_bpred_access          1678165 # total number accesses of bpred unit
total_window_access        39031531 # total number accesses of instruction window
total_lsq_access            2527609 # total number accesses of load/store queue
total_regfile_access       17949780 # total number accesses of arch. regfile
total_icache_access        10941920 # total number accesses of icache
total_dcache_access         2527609 # total number accesses of dcache
total_dcache2_access         815116 # total number accesses of dcache2
total_alu_access            9723242 # total number accesses of alu
total_resultbus_access      9862137 # total number accesses of resultbus
avg_rename_access            0.5409 # avg number accesses of rename unit
avg_bpred_access             0.0908 # avg number accesses of bpred unit
avg_window_access            2.1113 # avg number accesses of instruction window
avg_lsq_access               0.1367 # avg number accesses of lsq
avg_regfile_access           0.9709 # avg number accesses of arch. regfile
avg_icache_access            0.5919 # avg number accesses of icache
avg_dcache_access            0.1367 # avg number accesses of dcache
avg_dcache2_access           0.0441 # avg number accesses of dcache2
avg_alu_access               0.5259 # avg number accesses of alu
avg_resultbus_access         0.5335 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         27.6898 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.4753 # maximum cycle power usage of cc2
max_cycle_power_cc3         16.6304 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  92048 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12992 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   33 # total number of pages allocated
mem.page_mem                   132k # total size of memory pages allocated
mem.ptab_misses                  37 # total first level page table misses
mem.ptab_accesses          62430596 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred bimod -fetch:mplat 1 ../automotive/bitcount/bitcnts 75000 

sim: simulation started @ Thu Nov  5 20:19:54 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                 853374 # total number of loads and stores committed
sim_num_loads                577073 # total number of loads committed
sim_num_stores          276301.0000 # total number of stores committed
sim_num_branches            1828768 # total number of branches committed
sim_elapsed_time                  5 # total simulation time in seconds
sim_inst_rate          2000000.0000 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs               853374 # total number of loads and stores executed
sim_total_loads              577073 # total number of loads executed
sim_total_stores        276301.0000 # total number of stores executed
sim_total_branches          1828768 # total number of branches executed
sim_cycle                  11210592 # total simulation time in cycles
sim_IPC                      0.8920 # instructions per cycle
sim_CPI                      1.1211 # cycles per instruction
sim_exec_BW                  0.8920 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.4682 # instruction per branch
IFQ_count                  11074627 # cumulative IFQ occupancy
IFQ_fcount                 11074627 # cumulative IFQ full count
ifq_occupancy                0.9879 # avg IFQ occupancy (insn's)
ifq_rate                     0.8920 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.1075 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9879 # fraction of time (cycle's) IFQ was full
RUU_count                  30588127 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                2.7285 # avg RUU occupancy (insn's)
ruu_rate                     0.8920 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.0588 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                   3138761 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                0.2800 # avg LSQ occupancy (insn's)
lsq_rate                     0.8920 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.3139 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   44580253 # total number of slip cycles
avg_sim_slip                 4.4580 # the average slip between issue and retirement
bpred_bimod.lookups         1845780 # total number of bpred lookups
bpred_bimod.updates         1828768 # total number of updates
bpred_bimod.addr_hits       1719032 # total number of address-predicted hits
bpred_bimod.dir_hits        1736305 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses            92463 # total number of misses
bpred_bimod.jr_hits          269148 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen          286147 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP            2 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP           12 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9400 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9494 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9406 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.1667 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes       303120 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops       286135 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP       286135 # total number of RAS predictions used
bpred_bimod.ras_hits.PP       269146 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9406 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               10111165 # total number of accesses
il1.hits                   10109327 # total number of hits
il1.misses                     1838 # total number of misses
il1.replacements               1359 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0002 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                 853374 # total number of accesses
dl1.hits                     852894 # total number of hits
dl1.misses                      480 # total number of misses
dl1.replacements                 22 # total number of replacements
dl1.writebacks                   18 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                   2336 # total number of accesses
ul2.hits                       1487 # total number of hits
ul2.misses                      849 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.3634 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              10111165 # total number of accesses
itlb.hits                  10111145 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                853374 # total number of accesses
dtlb.hits                    853365 # total number of hits
dtlb.misses                       9 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power            897304.6390 # total power usage of rename unit
bpred_power            50706924.5847 # total power usage of bpred unit
window_power           4078022.3547 # total power usage of instruction window
lsq_power              10797817.8621 # total power usage of load/store queue
regfile_power          6008572.4650 # total power usage of arch. regfile
icache_power           27767983.2058 # total power usage of icache
dcache_power           68215401.5779 # total power usage of dcache
dcache2_power          47186451.7055 # total power usage of dcache2
alu_power              212341789.4237 # total power usage of alu
falu_power             160098968.2409 # total power usage of falu
resultbus_power        5726669.1114 # total power usage of resultbus
clock_power            241987851.6744 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      78474907.7905 # total power usage of fetch stage
dispatch_stage_power    897304.6390 # total power usage of dispatch stage
issue_stage_power      348346152.0353 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            675714788.6043 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn        67.5715 # average total power per insn
avg_total_power_insn_nofp_nod2      46.8429 # average total power per insn
rename_power_cc1        800407.3388 # total power usage of rename unit_cc1
bpred_power_cc1        8271748.8133 # total power usage of bpred unit_cc1
window_power_cc1       4758172.7442 # total power usage of instruction window_cc1
lsq_power_cc1           394682.9716 # total power usage of lsq_cc1
regfile_power_cc1      4744906.2546 # total power usage of arch. regfile_cc1
icache_power_cc1       25044793.8318 # total power usage of icache_cc1
dcache_power_cc1       5192688.6352 # total power usage of dcache_cc1
dcache2_power_cc1         9666.1877 # total power usage of dcache2_cc1
alu_power_cc1          45266717.0087 # total power usage of alu_cc1
resultbus_power_cc1    3744805.6022 # total power usage of resultbus_cc1
clock_power_cc1        62931649.7140 # total power usage of clock_cc1
avg_rename_power_cc1         0.0714 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.7379 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.4244 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0352 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.4233 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         2.2340 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.4632 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0009 # avg power usage of dcache2_cc1
avg_alu_power_cc1            4.0379 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.3340 # avg power usage of resultbus_cc1
avg_clock_power_cc1          5.6136 # avg power usage of clock_cc1
fetch_stage_power_cc1  33316542.6450 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800407.3388 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  59366733.1495 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.9719 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0714 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          5.2956 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  161160239.1020 # total power per cycle_cc1
avg_total_power_cycle_cc1      14.3757 # average total power per cycle_cc1
avg_total_power_insn_cc1      16.1160 # average total power per insn_cc1
rename_power_cc2        800407.3388 # total power usage of rename unit_cc2
bpred_power_cc2        4135874.4066 # total power usage of bpred unit_cc2
window_power_cc2       4732963.8090 # total power usage of instruction window_cc2
lsq_power_cc2           197341.4858 # total power usage of lsq_cc2
regfile_power_cc2      2533272.8650 # total power usage of arch. regfile_cc2
icache_power_cc2       25044793.8318 # total power usage of icache_cc2
dcache_power_cc2       2596350.4025 # total power usage of dcache_cc2
dcache2_power_cc2         4916.2235 # total power usage of dcache2_cc2
alu_power_cc2          11316679.2522 # total power usage of alu_cc2
resultbus_power_cc2    3744805.6022 # total power usage of resultbus_cc2
clock_power_cc2        35111250.4932 # total power usage of clock_cc2
avg_rename_power_cc2         0.0714 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.3689 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.4222 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0176 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.2260 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         2.2340 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.2316 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0004 # avg power usage of dcache2_cc2
avg_alu_power_cc2            1.0095 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.3340 # avg power usage of resultbus_cc2
avg_clock_power_cc2          3.1320 # avg power usage of clock_cc2
fetch_stage_power_cc2  29180668.2384 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800407.3388 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  22593056.7751 # total power usage of issue stage_cc2
avg_fetch_power_cc2          2.6030 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0714 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          2.0153 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  90218655.7106 # total power per cycle_cc2
avg_total_power_cycle_cc2       8.0476 # average total power per cycle_cc2
avg_total_power_insn_cc2       9.0219 # average total power per insn_cc2
rename_power_cc3        810097.0688 # total power usage of rename unit_cc3
bpred_power_cc3        8379391.9857 # total power usage of bpred unit_cc3
window_power_cc3       4748158.2191 # total power usage of instruction window_cc3
lsq_power_cc3          1233727.2517 # total power usage of lsq_cc3
regfile_power_cc3      2592720.0210 # total power usage of arch. regfile_cc3
icache_power_cc3       25317112.7681 # total power usage of icache_cc3
dcache_power_cc3       8898621.6971 # total power usage of dcache_cc3
dcache2_power_cc3      4722596.2496 # total power usage of dcache2_cc3
alu_power_cc3          28024186.4906 # total power usage of alu_cc3
resultbus_power_cc3    3870586.6006 # total power usage of resultbus_cc3
clock_power_cc3        52993250.2247 # total power usage of clock_cc3
avg_rename_power_cc3         0.0723 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.7475 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.4235 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1101 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.2313 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         2.2583 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.7938 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4213 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.4998 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.3453 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.7271 # avg power usage of clock_cc3
fetch_stage_power_cc3  33696504.7538 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  810097.0688 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  51497876.5087 # total power usage of issue stage_cc3
avg_fetch_power_cc3          3.0058 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0723 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.5937 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  141590448.5770 # total power per cycle_cc3
avg_total_power_cycle_cc3      12.6301 # average total power per cycle_cc3
avg_total_power_insn_cc3      14.1590 # average total power per insn_cc3
total_rename_access         9999993 # total number accesses of rename unit
total_bpred_access          1828768 # total number accesses of bpred unit
total_window_access        35525940 # total number accesses of instruction window
total_lsq_access             853374 # total number accesses of load/store queue
total_regfile_access       16159216 # total number accesses of arch. regfile
total_icache_access        10111176 # total number accesses of icache
total_dcache_access          853374 # total number accesses of dcache
total_dcache2_access           2336 # total number accesses of dcache2
total_alu_access            9713589 # total number accesses of alu
total_resultbus_access      8748297 # total number accesses of resultbus
avg_rename_access            0.8920 # avg number accesses of rename unit
avg_bpred_access             0.1631 # avg number accesses of bpred unit
avg_window_access            3.1690 # avg number accesses of instruction window
avg_lsq_access               0.0761 # avg number accesses of lsq
avg_regfile_access           1.4414 # avg number accesses of arch. regfile
avg_icache_access            0.9019 # avg number accesses of icache
avg_dcache_access            0.0761 # avg number accesses of dcache
avg_dcache2_access           0.0002 # avg number accesses of dcache2
avg_alu_access               0.8665 # avg number accesses of alu
avg_resultbus_access         0.7804 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         24.0311 # maximum cycle power usage of cc1
max_cycle_power_cc2         13.3521 # maximum cycle power usage of cc2
max_cycle_power_cc3         17.3368 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  81728 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                   9472 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   29 # total number of pages allocated
mem.page_mem                   116k # total size of memory pages allocated
mem.ptab_misses                  33 # total first level page table misses
mem.ptab_accesses          46963632 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred bimod -fetch:mplat 1 ../automotive/qsort/qsort_small ../automotive/qsort/input_small.dat 

sim: simulation started @ Thu Nov  5 20:19:59 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                4875142 # total number of loads and stores committed
sim_num_loads               2817230 # total number of loads committed
sim_num_stores         2057912.0000 # total number of stores committed
sim_num_branches            1872077 # total number of branches committed
sim_elapsed_time                  7 # total simulation time in seconds
sim_inst_rate          1428571.4286 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              4875142 # total number of loads and stores executed
sim_total_loads             2817230 # total number of loads executed
sim_total_stores       2057912.0000 # total number of stores executed
sim_total_branches          1872077 # total number of branches executed
sim_cycle                  15758944 # total simulation time in cycles
sim_IPC                      0.6346 # instructions per cycle
sim_CPI                      1.5759 # cycles per instruction
sim_exec_BW                  0.6346 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.3417 # instruction per branch
IFQ_count                  15169980 # cumulative IFQ occupancy
IFQ_fcount                 15169980 # cumulative IFQ full count
ifq_occupancy                0.9626 # avg IFQ occupancy (insn's)
ifq_rate                     0.6346 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5170 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9626 # fraction of time (cycle's) IFQ was full
RUU_count                  35575659 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                2.2575 # avg RUU occupancy (insn's)
ruu_rate                     0.6346 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.5576 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                  19376247 # cumulative LSQ occupancy
LSQ_fcount                       24 # cumulative LSQ full count
lsq_occupancy                1.2295 # avg LSQ occupancy (insn's)
lsq_rate                     0.6346 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.9376 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   69827018 # total number of slip cycles
avg_sim_slip                 6.9827 # the average slip between issue and retirement
bpred_bimod.lookups         1882992 # total number of bpred lookups
bpred_bimod.updates         1872076 # total number of updates
bpred_bimod.addr_hits       1779256 # total number of address-predicted hits
bpred_bimod.dir_hits        1779522 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses            92554 # total number of misses
bpred_bimod.jr_hits          179980 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen          180045 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        32391 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        32394 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9504 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9506 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9996 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9999 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes       147667 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops       147651 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP       147651 # total number of RAS predictions used
bpred_bimod.ras_hits.PP       147589 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9996 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               10163498 # total number of accesses
il1.hits                   10082538 # total number of hits
il1.misses                    80960 # total number of misses
il1.replacements              80541 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0080 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0079 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                4875141 # total number of accesses
dl1.hits                    4715203 # total number of hits
dl1.misses                   159938 # total number of misses
dl1.replacements             159426 # total number of replacements
dl1.writebacks                92947 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0328 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0327 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0191 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 333845 # total number of accesses
ul2.hits                     311091 # total number of hits
ul2.misses                    22754 # total number of misses
ul2.replacements              18658 # total number of replacements
ul2.writebacks                16610 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0682 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0559 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0498 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              10163498 # total number of accesses
itlb.hits                  10163481 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               4875141 # total number of accesses
dtlb.hits                   4874702 # total number of hits
dtlb.misses                     439 # total number of misses
dtlb.replacements               311 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0001 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1261358.3259 # total power usage of rename unit
bpred_power            71279695.5631 # total power usage of bpred unit
window_power           5732554.1682 # total power usage of instruction window
lsq_power              15178699.4820 # total power usage of load/store queue
regfile_power          8446365.4562 # total power usage of arch. regfile
icache_power           39033986.0981 # total power usage of icache
dcache_power           95891697.1588 # total power usage of dcache
dcache2_power          66330899.3719 # total power usage of dcache2
alu_power              298492922.4422 # total power usage of alu
falu_power             225054187.6469 # total power usage of falu
resultbus_power        8050088.5099 # total power usage of resultbus
clock_power            340166960.1557 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      110313681.6611 # total power usage of fetch stage
dispatch_stage_power   1261358.3259 # total power usage of dispatch stage
issue_stage_power      489676861.1330 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            949865226.7320 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn        94.9865 # average total power per insn
avg_total_power_insn_nofp_nod2      65.8480 # average total power per insn
rename_power_cc1        800406.3783 # total power usage of rename unit_cc1
bpred_power_cc1        8467636.3712 # total power usage of bpred unit_cc1
window_power_cc1       5971996.2743 # total power usage of instruction window_cc1
lsq_power_cc1          2238916.9768 # total power usage of lsq_cc1
regfile_power_cc1      5524790.5938 # total power usage of arch. regfile_cc1
icache_power_cc1       25174419.6236 # total power usage of icache_cc1
dcache_power_cc1       28879853.5651 # total power usage of dcache_cc1
dcache2_power_cc1      1013899.5379 # total power usage of dcache2_cc1
alu_power_cc1          44687966.8387 # total power usage of alu_cc1
resultbus_power_cc1    4815772.7578 # total power usage of resultbus_cc1
clock_power_cc1        79387657.7886 # total power usage of clock_cc1
avg_rename_power_cc1         0.0508 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.5373 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.3790 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.1421 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.3506 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.5975 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.8326 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0643 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.8357 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.3056 # avg power usage of resultbus_cc1
avg_clock_power_cc1          5.0376 # avg power usage of clock_cc1
fetch_stage_power_cc1  33642055.9948 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800406.3783 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  87608405.9506 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.1348 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0508 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          5.5593 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  206963316.7061 # total power per cycle_cc1
avg_total_power_cycle_cc1      13.1331 # average total power per cycle_cc1
avg_total_power_insn_cc1      20.6963 # average total power per insn_cc1
rename_power_cc2        800406.3783 # total power usage of rename unit_cc2
bpred_power_cc2        4233818.1856 # total power usage of bpred unit_cc2
window_power_cc2       5696347.5677 # total power usage of instruction window_cc2
lsq_power_cc2          1119458.4884 # total power usage of lsq_cc2
regfile_power_cc2      2857510.3848 # total power usage of arch. regfile_cc2
icache_power_cc2       25174419.6236 # total power usage of icache_cc2
dcache_power_cc2       14832388.0248 # total power usage of dcache_cc2
dcache2_power_cc2       702592.7343 # total power usage of dcache2_cc2
alu_power_cc2          11171991.7097 # total power usage of alu_cc2
resultbus_power_cc2    4815772.7578 # total power usage of resultbus_cc2
clock_power_cc2        44123963.3716 # total power usage of clock_cc2
avg_rename_power_cc2         0.0508 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2687 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.3615 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0710 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1813 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.5975 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.9412 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0446 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.7089 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.3056 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.7999 # avg power usage of clock_cc2
fetch_stage_power_cc2  29408237.8092 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800406.3783 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  38338551.2826 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.8661 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0508 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          2.4328 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  115528669.2265 # total power per cycle_cc2
avg_total_power_cycle_cc2       7.3310 # average total power per cycle_cc2
avg_total_power_insn_cc2      11.5529 # average total power per insn_cc2
rename_power_cc3        846501.5731 # total power usage of rename unit_cc3
bpred_power_cc3        10515024.1060 # total power usage of bpred unit_cc3
window_power_cc3       5733000.9223 # total power usage of instruction window_cc3
lsq_power_cc3          2396744.1058 # total power usage of lsq_cc3
regfile_power_cc3      3072900.2226 # total power usage of arch. regfile_cc3
icache_power_cc3       26560376.2682 # total power usage of icache_cc3
dcache_power_cc3       21533572.3879 # total power usage of dcache_cc3
dcache2_power_cc3      7234296.5088 # total power usage of dcache2_cc3
alu_power_cc3          36552487.2695 # total power usage of alu_cc3
resultbus_power_cc3    5069296.4308 # total power usage of resultbus_cc3
clock_power_cc3        70128523.2723 # total power usage of clock_cc3
avg_rename_power_cc3         0.0537 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6672 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.3638 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1521 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1950 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.6854 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.3664 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4591 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.3195 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.3217 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.4501 # avg power usage of clock_cc3
fetch_stage_power_cc3  37075400.3742 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  846501.5731 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  78519397.6251 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.3527 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0537 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.9825 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  189642723.0672 # total power per cycle_cc3
avg_total_power_cycle_cc3      12.0340 # average total power per cycle_cc3
avg_total_power_insn_cc3      18.9643 # average total power per insn_cc3
total_rename_access         9999981 # total number accesses of rename unit
total_bpred_access          1872076 # total number accesses of bpred unit
total_window_access        42056163 # total number accesses of instruction window
total_lsq_access            4875141 # total number accesses of load/store queue
total_regfile_access       18195155 # total number accesses of arch. regfile
total_icache_access        10163509 # total number accesses of icache
total_dcache_access         4875141 # total number accesses of dcache
total_dcache2_access         333845 # total number accesses of dcache2
total_alu_access            9589424 # total number accesses of alu
total_resultbus_access     10945132 # total number accesses of resultbus
avg_rename_access            0.6346 # avg number accesses of rename unit
avg_bpred_access             0.1188 # avg number accesses of bpred unit
avg_window_access            2.6687 # avg number accesses of instruction window
avg_lsq_access               0.3094 # avg number accesses of lsq
avg_regfile_access           1.1546 # avg number accesses of arch. regfile
avg_icache_access            0.6449 # avg number accesses of icache
avg_dcache_access            0.3094 # avg number accesses of dcache
avg_dcache2_access           0.0212 # avg number accesses of dcache2
avg_alu_access               0.6085 # avg number accesses of alu
avg_resultbus_access         0.6945 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 8 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              7 # max number accesses of resultbus
max_cycle_power_cc1         20.3974 # maximum cycle power usage of cc1
max_cycle_power_cc2         13.3020 # maximum cycle power usage of cc2
max_cycle_power_cc3         17.3381 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                 101552 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12288 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  390 # total number of pages allocated
mem.page_mem                  1560k # total size of memory pages allocated
mem.ptab_misses                 390 # total first level page table misses
mem.ptab_accesses          77708362 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred bimod -fetch:mplat 1 ../automotive/qsort/qsort_large ../automotive/qsort/input_large.dat 

sim: simulation started @ Thu Nov  5 20:20:06 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                3116585 # total number of loads and stores committed
sim_num_loads               2138586 # total number of loads committed
sim_num_stores          977999.0000 # total number of stores committed
sim_num_branches            2635877 # total number of branches committed
sim_elapsed_time                  7 # total simulation time in seconds
sim_inst_rate          1428571.4286 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              3116585 # total number of loads and stores executed
sim_total_loads             2138586 # total number of loads executed
sim_total_stores        977999.0000 # total number of stores executed
sim_total_branches          2635877 # total number of branches executed
sim_cycle                  14838855 # total simulation time in cycles
sim_IPC                      0.6739 # instructions per cycle
sim_CPI                      1.4839 # cycles per instruction
sim_exec_BW                  0.6739 # total instructions (mis-spec + committed) per cycle
sim_IPB                      3.7938 # instruction per branch
IFQ_count                  13585579 # cumulative IFQ occupancy
IFQ_fcount                 13585579 # cumulative IFQ full count
ifq_occupancy                0.9155 # avg IFQ occupancy (insn's)
ifq_rate                     0.6739 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3586 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9155 # fraction of time (cycle's) IFQ was full
RUU_count                  33745237 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                2.2741 # avg RUU occupancy (insn's)
ruu_rate                     0.6739 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.3745 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                  11586614 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                0.7808 # avg LSQ occupancy (insn's)
lsq_rate                     0.6739 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.1587 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   58448397 # total number of slip cycles
avg_sim_slip                 5.8448 # the average slip between issue and retirement
bpred_bimod.lookups         2635892 # total number of bpred lookups
bpred_bimod.updates         2635876 # total number of updates
bpred_bimod.addr_hits       2605305 # total number of address-predicted hits
bpred_bimod.dir_hits        2605457 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses            30419 # total number of misses
bpred_bimod.jr_hits          120949 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen          120956 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        10065 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        10066 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9884 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9885 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9999 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.9999 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes       110899 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops       110890 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP       110890 # total number of RAS predictions used
bpred_bimod.ras_hits.PP       110884 # total number of RAS hits
bpred_bimod.ras_rate.PP    0.9999 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               10232957 # total number of accesses
il1.hits                   10030370 # total number of hits
il1.misses                   202587 # total number of misses
il1.replacements             202269 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0198 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0198 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                3116584 # total number of accesses
dl1.hits                    3113474 # total number of hits
dl1.misses                     3110 # total number of misses
dl1.replacements               2598 # total number of replacements
dl1.writebacks                 2586 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0010 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0008 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 208283 # total number of accesses
ul2.hits                     206421 # total number of hits
ul2.misses                     1862 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0089 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              10232957 # total number of accesses
itlb.hits                  10232940 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               3116584 # total number of accesses
dtlb.hits                   3116553 # total number of hits
dtlb.misses                      31 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1187713.6755 # total power usage of rename unit
bpred_power            67118016.7228 # total power usage of bpred unit
window_power           5397857.8823 # total power usage of instruction window
lsq_power              14292488.1710 # total power usage of load/store queue
regfile_power          7953222.7717 # total power usage of arch. regfile
icache_power           36754979.2545 # total power usage of icache
dcache_power           90293041.8382 # total power usage of dcache
dcache2_power          62458156.9569 # total power usage of dcache2
alu_power              281065355.3085 # total power usage of alu
falu_power             211914355.2707 # total power usage of falu
resultbus_power        7580082.5317 # total power usage of resultbus
clock_power            320306246.2730 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      103872995.9772 # total power usage of fetch stage
dispatch_stage_power   1187713.6755 # total power usage of dispatch stage
issue_stage_power      461086982.6885 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            894407161.3860 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn        89.4407 # average total power per insn
avg_total_power_insn_nofp_nod2      62.0035 # average total power per insn
rename_power_cc1        800405.5779 # total power usage of rename unit_cc1
bpred_power_cc1        11922400.3120 # total power usage of bpred unit_cc1
window_power_cc1       5413097.9483 # total power usage of instruction window_cc1
lsq_power_cc1          1502015.5089 # total power usage of lsq_cc1
regfile_power_cc1      4784455.1142 # total power usage of arch. regfile_cc1
icache_power_cc1       25346455.6118 # total power usage of icache_cc1
dcache_power_cc1       18943706.6691 # total power usage of dcache_cc1
dcache2_power_cc1       865760.4238 # total power usage of dcache2_cc1
alu_power_cc1          46069053.9241 # total power usage of alu_cc1
resultbus_power_cc1    4231485.6804 # total power usage of resultbus_cc1
clock_power_cc1        74132925.8643 # total power usage of clock_cc1
avg_rename_power_cc1         0.0539 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.8035 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.3648 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.1012 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.3224 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.7081 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.2766 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0583 # avg power usage of dcache2_cc1
avg_alu_power_cc1            3.1046 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2852 # avg power usage of resultbus_cc1
avg_clock_power_cc1          4.9959 # avg power usage of clock_cc1
fetch_stage_power_cc1  37268855.9238 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800405.5779 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  77025120.1546 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.5116 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0539 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          5.1908 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  194011762.6348 # total power per cycle_cc1
avg_total_power_cycle_cc1      13.0746 # average total power per cycle_cc1
avg_total_power_insn_cc1      19.4012 # average total power per insn_cc1
rename_power_cc2        800405.5779 # total power usage of rename unit_cc2
bpred_power_cc2        5961200.1560 # total power usage of bpred unit_cc2
window_power_cc2       5219411.0606 # total power usage of instruction window_cc2
lsq_power_cc2           751007.7545 # total power usage of lsq_cc2
regfile_power_cc2      2337703.5947 # total power usage of arch. regfile_cc2
icache_power_cc2       25346455.6118 # total power usage of icache_cc2
dcache_power_cc2       9482060.7648 # total power usage of dcache_cc2
dcache2_power_cc2       438341.5132 # total power usage of dcache2_cc2
alu_power_cc2          11517263.4810 # total power usage of alu_cc2
resultbus_power_cc2    4231485.6804 # total power usage of resultbus_cc2
clock_power_cc2        40891014.2979 # total power usage of clock_cc2
avg_rename_power_cc2         0.0539 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.4017 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.3517 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0506 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1575 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.7081 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.6390 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0295 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.7762 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2852 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.7557 # avg power usage of clock_cc2
fetch_stage_power_cc2  31307655.7678 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800405.5779 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  31639570.2546 # total power usage of issue stage_cc2
avg_fetch_power_cc2          2.1098 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0539 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          2.1322 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  106976349.4929 # total power per cycle_cc2
avg_total_power_cycle_cc2       7.2092 # average total power per cycle_cc2
avg_total_power_insn_cc2      10.6976 # average total power per insn_cc2
rename_power_cc3        839136.3877 # total power usage of rename unit_cc3
bpred_power_cc3        11480761.7979 # total power usage of bpred unit_cc3
window_power_cc3       5281280.1844 # total power usage of instruction window_cc3
lsq_power_cc3          2021296.2040 # total power usage of lsq_cc3
regfile_power_cc3      2587060.2805 # total power usage of arch. regfile_cc3
icache_power_cc3       26487307.9740 # total power usage of icache_cc3
dcache_power_cc3       16616994.2848 # total power usage of dcache_cc3
dcache2_power_cc3      6597581.5900 # total power usage of dcache2_cc3
alu_power_cc3          35016893.6178 # total power usage of alu_cc3
resultbus_power_cc3    4506814.0400 # total power usage of resultbus_cc3
clock_power_cc3        65463262.8019 # total power usage of clock_cc3
avg_rename_power_cc3         0.0565 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.7737 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.3559 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1362 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1743 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.7850 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.1198 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4446 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.3598 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.3037 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.4116 # avg power usage of clock_cc3
fetch_stage_power_cc3  37968069.7719 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  839136.3877 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  70040859.9210 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.5587 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0565 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.7201 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  176898389.1630 # total power per cycle_cc3
avg_total_power_cycle_cc3      11.9213 # average total power per cycle_cc3
avg_total_power_insn_cc3      17.6898 # average total power per insn_cc3
total_rename_access         9999971 # total number accesses of rename unit
total_bpred_access          2635876 # total number accesses of bpred unit
total_window_access        38102982 # total number accesses of instruction window
total_lsq_access            3116585 # total number accesses of load/store queue
total_regfile_access       15054286 # total number accesses of arch. regfile
total_icache_access        10232964 # total number accesses of icache
total_dcache_access         3116584 # total number accesses of dcache
total_dcache2_access         208283 # total number accesses of dcache2
total_alu_access            9574096 # total number accesses of alu
total_resultbus_access      9502680 # total number accesses of resultbus
avg_rename_access            0.6739 # avg number accesses of rename unit
avg_bpred_access             0.1776 # avg number accesses of bpred unit
avg_window_access            2.5678 # avg number accesses of instruction window
avg_lsq_access               0.2100 # avg number accesses of lsq
avg_regfile_access           1.0145 # avg number accesses of arch. regfile
avg_icache_access            0.6896 # avg number accesses of icache
avg_dcache_access            0.2100 # avg number accesses of dcache
avg_dcache2_access           0.0140 # avg number accesses of dcache2
avg_alu_access               0.6452 # avg number accesses of alu
avg_resultbus_access         0.6404 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         28.8734 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.8687 # maximum cycle power usage of cc2
max_cycle_power_cc3         16.8411 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                 103072 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12288 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   57 # total number of pages allocated
mem.page_mem                   228k # total size of memory pages allocated
mem.ptab_misses                  57 # total first level page table misses
mem.ptab_accesses          62314880 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

