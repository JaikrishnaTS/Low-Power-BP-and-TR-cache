sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.7685
Branch Predictor Power Consumption: 4.52617  (7.45%)
 branch target buffer power (W): 4.16837
 TBIT power (W): 0.00304519
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.132%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.599%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.58%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.882%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.841%)
Total Clock Power: 21.873  (36%)
Int ALU Power: 4.66013  (7.67%)
FP ALU Power: 14.281  (23.5%)
Instruction Cache Power Consumption: 2.21363  (3.64%)
 tet_power (W): 0.0333148
 htb_power (W): 0.0720937
 trc_power (W): 0.203425
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.433%)
Data Cache Power Consumption: 5.18303  (8.53%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.48%)
Level 2 Cache Power Consumption: 4.2091 (6.93%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 100000000 -redir:sim trcbimod/out2.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred bimod -fetch:mplat 1 ../../../simplescalar/automotive/basicmath/basicmath_large 

sim: simulation started @ Sun Dec  6 20:44:16 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim     trcbimod/out2.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst           100000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                  bimod # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:trc       trc:2048:512 # TRC cache config, i.e., {<config>|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn              100000000 # total number of instructions committed
sim_num_refs               26827172 # total number of loads and stores committed
sim_num_loads              16823967 # total number of loads committed
sim_num_stores         10003205.0000 # total number of stores committed
sim_num_branches           17747262 # total number of branches committed
sim_elapsed_time                255 # total simulation time in seconds
sim_inst_rate           392156.8627 # simulation speed (in insts/sec)
sim_total_insn            100000000 # total number of instructions executed
sim_total_refs             26827172 # total number of loads and stores executed
sim_total_loads            16823967 # total number of loads executed
sim_total_stores       10003205.0000 # total number of stores executed
sim_total_branches         17747262 # total number of branches executed
sim_cycle                 176473040 # total simulation time in cycles
sim_IPC                      0.5667 # instructions per cycle
sim_CPI                      1.7647 # cycles per instruction
sim_exec_BW                  0.5667 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.6347 # instruction per branch
IFQ_count                 136595440 # cumulative IFQ occupancy
IFQ_fcount                136595440 # cumulative IFQ full count
ifq_occupancy                0.7740 # avg IFQ occupancy (insn's)
ifq_rate                     0.5667 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.3660 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7740 # fraction of time (cycle's) IFQ was full
RUU_count                 351402805 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                1.9913 # avg RUU occupancy (insn's)
ruu_rate                     0.5667 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.5140 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                  99033711 # cumulative LSQ occupancy
LSQ_fcount                       11 # cumulative LSQ full count
lsq_occupancy                0.5612 # avg LSQ occupancy (insn's)
lsq_rate                     0.5667 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.9903 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                  577256594 # total number of slip cycles
avg_sim_slip                 5.7726 # the average slip between issue and retirement
bpred_bimod.lookups        17788038 # total number of bpred lookups
bpred_bimod.updates        17747262 # total number of updates
bpred_bimod.addr_hits      16341554 # total number of address-predicted hits
bpred_bimod.dir_hits       16343233 # total number of direction-predicted hits (includes addr-hits)
bpred_bimod.misses          1404029 # total number of misses
bpred_bimod.jr_hits         1817127 # total number of address-predicted hits for JR's
bpred_bimod.jr_seen         1819622 # total number of JR's seen
bpred_bimod.jr_non_ras_hits.PP        17829 # total number of address-predicted hits for non-RAS JR's
bpred_bimod.jr_non_ras_seen.PP        20318 # total number of non-RAS JR's seen
bpred_bimod.bpred_addr_rate    0.9208 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_bimod.bpred_dir_rate    0.9209 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_bimod.bpred_jr_rate    0.9986 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_bimod.bpred_jr_non_ras_rate.PP    0.8775 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_bimod.retstack_pushes      1799315 # total number of address pushed onto ret-addr stack
bpred_bimod.retstack_pops      1799304 # total number of address popped off of ret-addr stack
bpred_bimod.used_ras.PP      1799304 # total number of RAS predictions used
bpred_bimod.ras_hits.PP      1799298 # total number of RAS hits
bpred_bimod.ras_rate.PP    1.0000 # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               55868430 # total number of accesses
il1.hits                   49384069 # total number of hits
il1.misses                  6484361 # total number of misses
il1.replacements            6483876 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.1161 # miss rate (i.e., misses/ref)
il1.repl_rate                0.1161 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses               26827171 # total number of accesses
dl1.hits                   26826602 # total number of hits
dl1.misses                      569 # total number of misses
dl1.replacements                 71 # total number of replacements
dl1.writebacks                   67 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0000 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                6484997 # total number of accesses
ul2.hits                    6484015 # total number of hits
ul2.misses                      982 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0002 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              55868430 # total number of accesses
itlb.hits                  55868408 # total number of hits
itlb.misses                      22 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses              26827171 # total number of accesses
dtlb.hits                  26827161 # total number of hits
dtlb.misses                      10 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
TRC.accesses               53986326 # total number of accesses
TRC.hits                   51840830 # total number of hits
TRC.misses                  2145496 # total number of misses
TRC.tetaccesses            53722943 # total number of TET accesses
rename_power           14125041.5540 # total power usage of rename unit
bpred_power            798209865.0440 # total power usage of bpred unit
window_power           64194736.6667 # total power usage of instruction window
lsq_power              169975300.3402 # total power usage of load/store queue
regfile_power          94584750.2790 # total power usage of arch. regfile
trc_power              11192485.8202 # total power usage of trc
icache_power           254562244.9396 # total power usage of icache
dcache_power           1073821903.8483 # total power usage of dcache
dcache2_power          742791868.8720 # total power usage of dcache2
alu_power              3342606813.0544 # total power usage of alu
falu_power             2520219418.3322 # total power usage of falu
resultbus_power        90147131.3093 # total power usage of resultbus
clock_power            3859989448.3662 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_trc_power                0.0634 # avg power usage of trc
avg_icache_power             1.4425 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.8730 # avg power usage of clock
fetch_stage_power      1063964595.8038 # total power usage of fetch stage
dispatch_stage_power   14125041.5540 # total power usage of dispatch stage
issue_stage_power      5483537754.0909 # total power usage of issue stage
avg_fetch_power              6.0290 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            10516201590.0939 # total power per cycle
avg_total_power_cycle       59.5910 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.1008 # average total power per cycle
avg_total_power_insn       105.1620 # average total power per insn
avg_total_power_insn_nofp_nod2      72.5319 # average total power per insn
rename_power_cc1       8003511.9990 # total power usage of rename unit_cc1
bpred_power_cc1          54043.8177 # total power usage of bpred unit_cc1
window_power_cc1       52877186.9783 # total power usage of instruction window_cc1
lsq_power_cc1          12169873.7058 # total power usage of lsq_cc1
regfile_power_cc1      51874660.3288 # total power usage of arch. regfile_cc1
icache_power_cc1       138382868.2154 # total power usage of icache_cc1
dcache_power_cc1       163197703.4003 # total power usage of dcache_cc1
dcache2_power_cc1      27295600.9300 # total power usage of dcache2_cc1
alu_power_cc1          468263149.2145 # total power usage of alu_cc1
resultbus_power_cc1    39996549.4713 # total power usage of resultbus_cc1
clock_power_cc1        614678288.2073 # total power usage of clock_cc1
avg_rename_power_cc1         0.0454 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.0003 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.2996 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0690 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.2940 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         0.7842 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.9248 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1547 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.6535 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2266 # avg power usage of resultbus_cc1
avg_clock_power_cc1          3.4831 # avg power usage of clock_cc1
fetch_stage_power_cc1  138436912.0331 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1 8003511.9990 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  763800063.7001 # total power usage of issue stage_cc1
avg_fetch_power_cc1          0.7845 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0454 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.3281 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  1576793436.2683 # total power per cycle_cc1
avg_total_power_cycle_cc1       8.9350 # average total power per cycle_cc1
avg_total_power_insn_cc1      15.7679 # average total power per insn_cc1
rename_power_cc2       8003511.9990 # total power usage of rename unit_cc2
bpred_power_cc2        40136554.5938 # total power usage of bpred unit_cc2
window_power_cc2       50111058.0641 # total power usage of instruction window_cc2
lsq_power_cc2          6084936.8529 # total power usage of lsq_cc2
regfile_power_cc2      25817163.3904 # total power usage of arch. regfile_cc2
icache_power_cc2       138382868.2154 # total power usage of icache_cc2
dcache_power_cc2       81620410.5231 # total power usage of dcache_cc2
dcache2_power_cc2      13647985.6652 # total power usage of dcache2_cc2
alu_power_cc2          117065787.3036 # total power usage of alu_cc2
resultbus_power_cc2    39996549.4713 # total power usage of resultbus_cc2
clock_power_cc2        332745764.5467 # total power usage of clock_cc2
avg_rename_power_cc2         0.0454 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2274 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.2840 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0345 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1463 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         0.7842 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.4625 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0773 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.6634 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2266 # avg power usage of resultbus_cc2
avg_clock_power_cc2          1.8855 # avg power usage of clock_cc2
fetch_stage_power_cc2  178519422.8092 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2 8003511.9990 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  308526727.8802 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.0116 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0454 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.7483 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  853612590.6255 # total power per cycle_cc2
avg_total_power_cycle_cc2       4.8371 # average total power per cycle_cc2
avg_total_power_insn_cc2       8.5361 # average total power per insn_cc2
rename_power_cc3       8615664.9419 # total power usage of rename unit_cc3
bpred_power_cc3        111978564.9887 # total power usage of bpred unit_cc3
window_power_cc3       51626293.5038 # total power usage of instruction window_cc3
lsq_power_cc3          21738375.5912 # total power usage of lsq_cc3
regfile_power_cc3      28977278.1500 # total power usage of arch. regfile_cc3
icache_power_cc3       168255925.1897 # total power usage of icache_cc3
dcache_power_cc3       172682830.7829 # total power usage of dcache_cc3
dcache2_power_cc3      85197613.1531 # total power usage of dcache2_cc3
alu_power_cc3          404500153.8132 # total power usage of alu_cc3
resultbus_power_cc3    43974116.4151 # total power usage of resultbus_cc3
clock_power_cc3        662310120.2529 # total power usage of clock_cc3
avg_rename_power_cc3         0.0488 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6345 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.2925 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1232 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1642 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         0.9534 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9785 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4828 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.2921 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2492 # avg power usage of resultbus_cc3
avg_clock_power_cc3          3.7530 # avg power usage of clock_cc3
fetch_stage_power_cc3  280234490.1784 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3 8615664.9419 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  779719383.2594 # total power usage of issue stage_cc3
avg_fetch_power_cc3          1.5880 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0488 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.4183 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  1759856936.7825 # total power per cycle_cc3
avg_total_power_cycle_cc3       9.9724 # average total power per cycle_cc3
avg_total_power_insn_cc3      17.5986 # average total power per insn_cc3
total_rename_access        99992916 # total number accesses of rename unit
total_bpred_access         17747262 # total number accesses of bpred unit
total_window_access       390991150 # total number accesses of instruction window
total_lsq_access           26827172 # total number accesses of load/store queue
total_regfile_access      176548700 # total number accesses of arch. regfile
total_icache_access        55868439 # total number accesses of icache
total_trc_access           51840830 # total number accesses of trc
total_dcache_access        26827171 # total number accesses of dcache
total_dcache2_access        6484997 # total number accesses of dcache2
total_alu_access           97265128 # total number accesses of alu
total_resultbus_access     99069620 # total number accesses of resultbus
avg_rename_access            0.5666 # avg number accesses of rename unit
avg_bpred_access             0.1006 # avg number accesses of bpred unit
avg_window_access            2.2156 # avg number accesses of instruction window
avg_lsq_access               0.1520 # avg number accesses of lsq
avg_regfile_access           1.0004 # avg number accesses of arch. regfile
avg_icache_access            0.3166 # avg number accesses of icache
avg_trc_access               0.2938 # avg number accesses of trc
avg_dcache_access            0.1520 # avg number accesses of dcache
avg_dcache2_access           0.0367 # avg number accesses of dcache2
avg_alu_access               0.5512 # avg number accesses of alu
avg_resultbus_access         0.5614 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_trc_access                    1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         27.3876 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.1742 # maximum cycle power usage of cc2
max_cycle_power_cc3         16.4279 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  92048 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12992 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   33 # total number of pages allocated
mem.page_mem                   132k # total size of memory pages allocated
mem.ptab_misses                  37 # total first level page table misses
mem.ptab_accesses         418966240 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

