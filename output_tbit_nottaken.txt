sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred tbit -fetch:mplat 1 ../automotive/basicmath/basicmath_small 

sim: simulation started @ Thu Nov  5 20:18:48 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   tbit # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                2524436 # total number of loads and stores committed
sim_num_loads               1539041 # total number of loads committed
sim_num_stores          985395.0000 # total number of stores committed
sim_num_branches            1678895 # total number of branches committed
sim_elapsed_time                  8 # total simulation time in seconds
sim_inst_rate          1250000.0000 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              2524436 # total number of loads and stores executed
sim_total_loads             1539041 # total number of loads executed
sim_total_stores        985395.0000 # total number of stores executed
sim_total_branches          1678895 # total number of branches executed
sim_cycle                  20573532 # total simulation time in cycles
sim_IPC                      0.4861 # instructions per cycle
sim_CPI                      2.0574 # cycles per instruction
sim_exec_BW                  0.4861 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.9563 # instruction per branch
IFQ_count                  14759984 # cumulative IFQ occupancy
IFQ_fcount                 14759984 # cumulative IFQ full count
ifq_occupancy                0.7174 # avg IFQ occupancy (insn's)
ifq_rate                     0.4861 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.4760 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7174 # fraction of time (cycle's) IFQ was full
RUU_count                  35065671 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                1.7044 # avg RUU occupancy (insn's)
ruu_rate                     0.4861 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.5066 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                   9235905 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                0.4489 # avg LSQ occupancy (insn's)
lsq_rate                     0.4861 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.9236 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   56826002 # total number of slip cycles
avg_sim_slip                 5.6826 # the average slip between issue and retirement
bpred_tbit.lookups          1759608 # total number of bpred lookups
bpred_tbit.updates          1678895 # total number of updates
bpred_tbit.addr_hits         806354 # total number of address-predicted hits
bpred_tbit.dir_hits          827540 # total number of direction-predicted hits (includes addr-hits)
bpred_tbit.used_tbit          78620 # total number of TBIT predictions used
bpred_tbit.tbit_hits          36981 # total number of tbit hits
bpred_tbit.misses            851355 # total number of misses
bpred_tbit.jr_hits              314 # total number of address-predicted hits for JR's
bpred_tbit.jr_seen           185800 # total number of JR's seen
bpred_tbit.jr_non_ras_hits.PP          314 # total number of address-predicted hits for non-RAS JR's
bpred_tbit.jr_non_ras_seen.PP       185800 # total number of non-RAS JR's seen
bpred_tbit.bpred_addr_rate    0.4803 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_tbit.bpred_dir_rate    0.4929 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_tbit.bpred_jr_rate    0.0017 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_tbit.bpred_jr_non_ras_rate.PP    0.0017 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_tbit.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_tbit.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_tbit.used_ras.PP            0 # total number of RAS predictions used
bpred_tbit.ras_hits.PP            0 # total number of RAS hits
bpred_tbit.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               11652795 # total number of accesses
il1.hits                   10799322 # total number of hits
il1.misses                   853473 # total number of misses
il1.replacements             852985 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0732 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0732 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                2524434 # total number of accesses
dl1.hits                    2523800 # total number of hits
dl1.misses                      634 # total number of misses
dl1.replacements                122 # total number of replacements
dl1.writebacks                  116 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0003 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 854223 # total number of accesses
ul2.hits                     853222 # total number of hits
ul2.misses                     1001 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0012 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              11652795 # total number of accesses
itlb.hits                  11652773 # total number of hits
itlb.misses                      22 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               2524435 # total number of accesses
dtlb.hits                   2524425 # total number of hits
dtlb.misses                      10 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1646721.7525 # total power usage of rename unit
bpred_power            93056685.6200 # total power usage of bpred unit
window_power           7483933.3523 # total power usage of instruction window
lsq_power              19816014.2888 # total power usage of load/store queue
regfile_power          11026853.7038 # total power usage of arch. regfile
icache_power           50959440.0499 # total power usage of icache
dcache_power           125188013.8441 # total power usage of dcache
dcache2_power          86595959.8065 # total power usage of dcache2
alu_power              389686878.2348 # total power usage of alu
falu_power             293811535.3389 # total power usage of falu
resultbus_power        10509508.3477 # total power usage of resultbus
clock_power            444092944.1977 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      144016125.6699 # total power usage of fetch stage
dispatch_stage_power   1646721.7525 # total power usage of dispatch stage
issue_stage_power      639280307.8741 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            1240062953.1980 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn       124.0063 # average total power per insn
avg_total_power_insn_nofp_nod2      85.9655 # average total power per insn
rename_power_cc1        800407.4188 # total power usage of rename unit_cc1
bpred_power_cc1        7593854.2909 # total power usage of bpred unit_cc1
window_power_cc1       5574507.9482 # total power usage of instruction window_cc1
lsq_power_cc1          1130262.3786 # total power usage of lsq_cc1
regfile_power_cc1      5749900.1820 # total power usage of arch. regfile_cc1
icache_power_cc1       28863294.2717 # total power usage of icache_cc1
dcache_power_cc1       15358096.5442 # total power usage of dcache_cc1
dcache2_power_cc1      3594918.9690 # total power usage of dcache2_cc1
alu_power_cc1          46772652.8975 # total power usage of alu_cc1
resultbus_power_cc1    4515569.4443 # total power usage of resultbus_cc1
clock_power_cc1        72506103.4632 # total power usage of clock_cc1
avg_rename_power_cc1         0.0389 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.3691 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.2710 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0549 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.2795 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.4029 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.7465 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1747 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.2734 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2195 # avg power usage of resultbus_cc1
avg_clock_power_cc1          3.5242 # avg power usage of clock_cc1
fetch_stage_power_cc1  36457148.5625 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800407.4188 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  76946008.1818 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.7720 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0389 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          3.7400 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  192459567.8084 # total power per cycle_cc1
avg_total_power_cycle_cc1       9.3547 # average total power per cycle_cc1
avg_total_power_insn_cc1      19.2460 # average total power per insn_cc1
rename_power_cc2        800407.4188 # total power usage of rename unit_cc2
bpred_power_cc2        3796927.1454 # total power usage of bpred unit_cc2
window_power_cc2       5166559.8480 # total power usage of instruction window_cc2
lsq_power_cc2           565131.1893 # total power usage of lsq_cc2
regfile_power_cc2      2725390.5610 # total power usage of arch. regfile_cc2
icache_power_cc2       28863294.2717 # total power usage of icache_cc2
dcache_power_cc2       7680472.1402 # total power usage of dcache_cc2
dcache2_power_cc2      1797753.0689 # total power usage of dcache2_cc2
alu_power_cc2          11693163.2244 # total power usage of alu_cc2
resultbus_power_cc2    4515569.4443 # total power usage of resultbus_cc2
clock_power_cc2        40999387.5944 # total power usage of clock_cc2
avg_rename_power_cc2         0.0389 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.1846 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.2511 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0275 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1325 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.4029 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.3733 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0874 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.5684 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2195 # avg power usage of resultbus_cc2
avg_clock_power_cc2          1.9928 # avg power usage of clock_cc2
fetch_stage_power_cc2  32660221.4171 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800407.4188 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  31418648.9151 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.5875 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0389 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.5271 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  108604055.9065 # total power per cycle_cc2
avg_total_power_cycle_cc2       5.2788 # average total power per cycle_cc2
avg_total_power_insn_cc2      10.8604 # average total power per insn_cc2
rename_power_cc3        885038.8522 # total power usage of rename unit_cc3
bpred_power_cc3        12343210.2792 # total power usage of bpred unit_cc3
window_power_cc3       5400334.9983 # total power usage of instruction window_cc3
lsq_power_cc3          2420927.5769 # total power usage of lsq_cc3
regfile_power_cc3      3158608.2698 # total power usage of arch. regfile_cc3
icache_power_cc3       31072908.8442 # total power usage of icache_cc3
dcache_power_cc3       18663463.8775 # total power usage of dcache_cc3
dcache2_power_cc3      10097858.2062 # total power usage of dcache2_cc3
alu_power_cc3          45984585.7618 # total power usage of alu_cc3
resultbus_power_cc3    5064474.9982 # total power usage of resultbus_cc3
clock_power_cc3        78086676.6806 # total power usage of clock_cc3
avg_rename_power_cc3         0.0430 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6000 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.2625 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1177 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1535 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.5103 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9072 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4908 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.2351 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2462 # avg power usage of resultbus_cc3
avg_clock_power_cc3          3.7955 # avg power usage of clock_cc3
fetch_stage_power_cc3  43416119.1234 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  885038.8522 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  87631645.4189 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.1103 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0430 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.2594 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  213178088.3449 # total power per cycle_cc3
avg_total_power_cycle_cc3      10.3618 # average total power per cycle_cc3
avg_total_power_insn_cc3      21.3178 # average total power per insn_cc3
total_rename_access         9999994 # total number accesses of rename unit
total_bpred_access          1678895 # total number accesses of bpred unit
total_window_access        39021945 # total number accesses of instruction window
total_lsq_access            2524436 # total number accesses of load/store queue
total_regfile_access       17947026 # total number accesses of arch. regfile
total_icache_access        11652795 # total number accesses of icache
total_dcache_access         2524434 # total number accesses of dcache
total_dcache2_access         854223 # total number accesses of dcache2
total_alu_access            9723233 # total number accesses of alu
total_resultbus_access      9860138 # total number accesses of resultbus
avg_rename_access            0.4861 # avg number accesses of rename unit
avg_bpred_access             0.0816 # avg number accesses of bpred unit
avg_window_access            1.8967 # avg number accesses of instruction window
avg_lsq_access               0.1227 # avg number accesses of lsq
avg_regfile_access           0.8723 # avg number accesses of arch. regfile
avg_icache_access            0.5664 # avg number accesses of icache
avg_dcache_access            0.1227 # avg number accesses of dcache
avg_dcache2_access           0.0415 # avg number accesses of dcache2
avg_alu_access               0.4726 # avg number accesses of alu
avg_resultbus_access         0.4793 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    2 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         27.4428 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.1513 # maximum cycle power usage of cc2
max_cycle_power_cc3         16.1123 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  91008 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12848 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   33 # total number of pages allocated
mem.page_mem                   132k # total size of memory pages allocated
mem.ptab_misses                  37 # total first level page table misses
mem.ptab_accesses          65249460 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred tbit -fetch:mplat 1 ../automotive/basicmath/basicmath_large 

sim: simulation started @ Thu Nov  5 20:18:56 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   tbit # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                2527609 # total number of loads and stores committed
sim_num_loads               1540310 # total number of loads committed
sim_num_stores          987299.0000 # total number of stores committed
sim_num_branches            1678165 # total number of branches committed
sim_elapsed_time                  8 # total simulation time in seconds
sim_inst_rate          1250000.0000 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              2527609 # total number of loads and stores executed
sim_total_loads             1540310 # total number of loads executed
sim_total_stores        987299.0000 # total number of stores executed
sim_total_branches          1678165 # total number of branches executed
sim_cycle                  20545102 # total simulation time in cycles
sim_IPC                      0.4867 # instructions per cycle
sim_CPI                      2.0545 # cycles per instruction
sim_exec_BW                  0.4867 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.9589 # instruction per branch
IFQ_count                  14740412 # cumulative IFQ occupancy
IFQ_fcount                 14740412 # cumulative IFQ full count
ifq_occupancy                0.7175 # avg IFQ occupancy (insn's)
ifq_rate                     0.4867 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.4740 # avg IFQ occupant latency (cycle's)
ifq_full                     0.7175 # fraction of time (cycle's) IFQ was full
RUU_count                  35015539 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                1.7043 # avg RUU occupancy (insn's)
ruu_rate                     0.4867 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.5016 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                   9263433 # cumulative LSQ occupancy
LSQ_fcount                        9 # cumulative LSQ full count
lsq_occupancy                0.4509 # avg LSQ occupancy (insn's)
lsq_rate                     0.4867 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.9263 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   56806570 # total number of slip cycles
avg_sim_slip                 5.6807 # the average slip between issue and retirement
bpred_tbit.lookups          1756607 # total number of bpred lookups
bpred_tbit.updates          1678165 # total number of updates
bpred_tbit.addr_hits         797508 # total number of address-predicted hits
bpred_tbit.dir_hits          807945 # total number of direction-predicted hits (includes addr-hits)
bpred_tbit.used_tbit          79142 # total number of TBIT predictions used
bpred_tbit.tbit_hits          37459 # total number of tbit hits
bpred_tbit.misses            870220 # total number of misses
bpred_tbit.jr_hits              428 # total number of address-predicted hits for JR's
bpred_tbit.jr_seen           185893 # total number of JR's seen
bpred_tbit.jr_non_ras_hits.PP          428 # total number of address-predicted hits for non-RAS JR's
bpred_tbit.jr_non_ras_seen.PP       185893 # total number of non-RAS JR's seen
bpred_tbit.bpred_addr_rate    0.4752 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_tbit.bpred_dir_rate    0.4814 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_tbit.bpred_jr_rate    0.0023 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_tbit.bpred_jr_non_ras_rate.PP    0.0023 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_tbit.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_tbit.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_tbit.used_ras.PP            0 # total number of RAS predictions used
bpred_tbit.ras_hits.PP            0 # total number of RAS hits
bpred_tbit.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               11657003 # total number of accesses
il1.hits                   10779714 # total number of hits
il1.misses                   877289 # total number of misses
il1.replacements             876802 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0753 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0752 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                2527609 # total number of accesses
dl1.hits                    2526967 # total number of hits
dl1.misses                      642 # total number of misses
dl1.replacements                130 # total number of replacements
dl1.writebacks                  125 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0003 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 878056 # total number of accesses
ul2.hits                     877037 # total number of hits
ul2.misses                     1019 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0012 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              11657003 # total number of accesses
itlb.hits                  11656981 # total number of hits
itlb.misses                      22 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               2527609 # total number of accesses
dtlb.hits                   2527599 # total number of hits
dtlb.misses                      10 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1644446.1928 # total power usage of rename unit
bpred_power            92928093.1366 # total power usage of bpred unit
window_power           7473591.5099 # total power usage of instruction window
lsq_power              19788631.0818 # total power usage of load/store queue
regfile_power          11011615.9969 # total power usage of arch. regfile
icache_power           50889020.5964 # total power usage of icache
dcache_power           125015019.9589 # total power usage of dcache
dcache2_power          86476295.2229 # total power usage of dcache2
alu_power              389148380.6181 # total power usage of alu
falu_power             293405525.2307 # total power usage of falu
resultbus_power        10494985.5461 # total power usage of resultbus
clock_power            443479264.3301 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      143817113.7330 # total power usage of fetch stage
dispatch_stage_power   1644446.1928 # total power usage of dispatch stage
issue_stage_power      638396903.9378 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            1238349344.1907 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn       123.8349 # average total power per insn
avg_total_power_insn_nofp_nod2      85.8468 # average total power per insn
rename_power_cc1        800407.4188 # total power usage of rename unit_cc1
bpred_power_cc1        7590552.4086 # total power usage of bpred unit_cc1
window_power_cc1       5543032.3463 # total power usage of instruction window_cc1
lsq_power_cc1          1133392.2144 # total power usage of lsq_cc1
regfile_power_cc1      5730337.4730 # total power usage of arch. regfile_cc1
icache_power_cc1       28873717.2425 # total power usage of icache_cc1
dcache_power_cc1       15371878.8569 # total power usage of dcache_cc1
dcache2_power_cc1      3695213.2952 # total power usage of dcache2_cc1
alu_power_cc1          46752192.6699 # total power usage of alu_cc1
resultbus_power_cc1    4455538.8208 # total power usage of resultbus_cc1
clock_power_cc1        72407234.5201 # total power usage of clock_cc1
avg_rename_power_cc1         0.0390 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.3695 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.2698 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0552 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.2789 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.4054 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.7482 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.1799 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.2756 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2169 # avg power usage of resultbus_cc1
avg_clock_power_cc1          3.5243 # avg power usage of clock_cc1
fetch_stage_power_cc1  36464269.6511 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800407.4188 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  76951248.2035 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.7748 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0390 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          3.7455 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  192353497.2665 # total power per cycle_cc1
avg_total_power_cycle_cc1       9.3625 # average total power per cycle_cc1
avg_total_power_insn_cc1      19.2353 # average total power per insn_cc1
rename_power_cc2        800407.4188 # total power usage of rename unit_cc2
bpred_power_cc2        3795276.2043 # total power usage of bpred unit_cc2
window_power_cc2       5150580.4337 # total power usage of instruction window_cc2
lsq_power_cc2           566696.1072 # total power usage of lsq_cc2
regfile_power_cc2      2717619.9985 # total power usage of arch. regfile_cc2
icache_power_cc2       28873717.2425 # total power usage of icache_cc2
dcache_power_cc2       7690131.9289 # total power usage of dcache_cc2
dcache2_power_cc2      1847910.7548 # total power usage of dcache2_cc2
alu_power_cc2          11688048.1675 # total power usage of alu_cc2
resultbus_power_cc2    4455538.8208 # total power usage of resultbus_cc2
clock_power_cc2        40936179.6737 # total power usage of clock_cc2
avg_rename_power_cc2         0.0390 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.1847 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.2507 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0276 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1323 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.4054 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.3743 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0899 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.5689 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2169 # avg power usage of resultbus_cc2
avg_clock_power_cc2          1.9925 # avg power usage of clock_cc2
fetch_stage_power_cc2  32668993.4468 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800407.4188 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  31398906.2128 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.5901 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0390 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.5283 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  108522106.7506 # total power per cycle_cc2
avg_total_power_cycle_cc2       5.2821 # average total power per cycle_cc2
avg_total_power_insn_cc2      10.8522 # average total power per insn_cc2
rename_power_cc3        884811.2962 # total power usage of rename unit_cc3
bpred_power_cc3        12329030.2780 # total power usage of bpred unit_cc3
window_power_cc3       5385556.2816 # total power usage of instruction window_cc3
lsq_power_cc3          2419606.2027 # total power usage of lsq_cc3
regfile_power_cc3      3148326.7819 # total power usage of arch. regfile_cc3
icache_power_cc3       31075247.5726 # total power usage of icache_cc3
dcache_power_cc3       18654446.0464 # total power usage of dcache_cc3
dcache2_power_cc3      10126019.5802 # total power usage of dcache2_cc3
alu_power_cc3          45927666.9660 # total power usage of alu_cc3
resultbus_power_cc3    5003366.2751 # total power usage of resultbus_cc3
clock_power_cc3        77966311.4405 # total power usage of clock_cc3
avg_rename_power_cc3         0.0431 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6001 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.2621 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1178 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1532 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.5125 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.9080 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4929 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.2355 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2435 # avg power usage of resultbus_cc3
avg_clock_power_cc3          3.7949 # avg power usage of clock_cc3
fetch_stage_power_cc3  43404277.8506 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  884811.2962 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  87516661.3520 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.1126 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0431 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.2597 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  212920388.7212 # total power per cycle_cc3
avg_total_power_cycle_cc3      10.3636 # average total power per cycle_cc3
avg_total_power_insn_cc3      21.2920 # average total power per insn_cc3
total_rename_access         9999994 # total number accesses of rename unit
total_bpred_access          1678165 # total number accesses of bpred unit
total_window_access        39047098 # total number accesses of instruction window
total_lsq_access            2527609 # total number accesses of load/store queue
total_regfile_access       17965347 # total number accesses of arch. regfile
total_icache_access        11657003 # total number accesses of icache
total_dcache_access         2527609 # total number accesses of dcache
total_dcache2_access         878056 # total number accesses of dcache2
total_alu_access            9723242 # total number accesses of alu
total_resultbus_access      9862137 # total number accesses of resultbus
avg_rename_access            0.4867 # avg number accesses of rename unit
avg_bpred_access             0.0817 # avg number accesses of bpred unit
avg_window_access            1.9006 # avg number accesses of instruction window
avg_lsq_access               0.1230 # avg number accesses of lsq
avg_regfile_access           0.8744 # avg number accesses of arch. regfile
avg_icache_access            0.5674 # avg number accesses of icache
avg_dcache_access            0.1230 # avg number accesses of dcache
avg_dcache2_access           0.0427 # avg number accesses of dcache2
avg_alu_access               0.4733 # avg number accesses of alu
avg_resultbus_access         0.4800 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         27.3761 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.3576 # maximum cycle power usage of cc2
max_cycle_power_cc3         16.5451 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  92048 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12992 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   33 # total number of pages allocated
mem.page_mem                   132k # total size of memory pages allocated
mem.ptab_misses                  37 # total first level page table misses
mem.ptab_accesses          65290968 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred tbit -fetch:mplat 1 ../automotive/bitcount/bitcnts 75000 

sim: simulation started @ Thu Nov  5 20:19:04 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   tbit # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                 853405 # total number of loads and stores committed
sim_num_loads                577085 # total number of loads committed
sim_num_stores          276320.0000 # total number of stores committed
sim_num_branches            1828785 # total number of branches committed
sim_elapsed_time                  5 # total simulation time in seconds
sim_inst_rate          2000000.0000 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs               853405 # total number of loads and stores executed
sim_total_loads              577085 # total number of loads executed
sim_total_stores        276320.0000 # total number of stores executed
sim_total_branches          1828785 # total number of branches executed
sim_cycle                  12928565 # total simulation time in cycles
sim_IPC                      0.7735 # instructions per cycle
sim_CPI                      1.2929 # cycles per instruction
sim_exec_BW                  0.7735 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.4681 # instruction per branch
IFQ_count                  12220317 # cumulative IFQ occupancy
IFQ_fcount                 12220317 # cumulative IFQ full count
ifq_occupancy                0.9452 # avg IFQ occupancy (insn's)
ifq_rate                     0.7735 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.2220 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9452 # fraction of time (cycle's) IFQ was full
RUU_count                  30587755 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                2.3659 # avg RUU occupancy (insn's)
ruu_rate                     0.7735 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.0588 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                   3138853 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                0.2428 # avg LSQ occupancy (insn's)
lsq_rate                     0.7735 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  0.3139 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   44580001 # total number of slip cycles
avg_sim_slip                 4.4580 # the average slip between issue and retirement
bpred_tbit.lookups          1845936 # total number of bpred lookups
bpred_tbit.updates          1828785 # total number of updates
bpred_tbit.addr_hits        1146334 # total number of address-predicted hits
bpred_tbit.dir_hits         1146358 # total number of direction-predicted hits (includes addr-hits)
bpred_tbit.used_tbit          92239 # total number of TBIT predictions used
bpred_tbit.tbit_hits             77 # total number of tbit hits
bpred_tbit.misses            682427 # total number of misses
bpred_tbit.jr_hits                2 # total number of address-predicted hits for JR's
bpred_tbit.jr_seen           286167 # total number of JR's seen
bpred_tbit.jr_non_ras_hits.PP            2 # total number of address-predicted hits for non-RAS JR's
bpred_tbit.jr_non_ras_seen.PP       286167 # total number of non-RAS JR's seen
bpred_tbit.bpred_addr_rate    0.6268 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_tbit.bpred_dir_rate    0.6268 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_tbit.bpred_jr_rate    0.0000 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_tbit.bpred_jr_non_ras_rate.PP    0.0000 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_tbit.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_tbit.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_tbit.used_ras.PP            0 # total number of RAS predictions used
bpred_tbit.ras_hits.PP            0 # total number of RAS hits
bpred_tbit.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               10684171 # total number of accesses
il1.hits                   10682274 # total number of hits
il1.misses                     1897 # total number of misses
il1.replacements               1413 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0002 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0001 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                 853405 # total number of accesses
dl1.hits                     852925 # total number of hits
dl1.misses                      480 # total number of misses
dl1.replacements                 22 # total number of replacements
dl1.writebacks                   18 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0006 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                   2395 # total number of accesses
ul2.hits                       1529 # total number of hits
ul2.misses                      866 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.3616 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              10684171 # total number of accesses
itlb.hits                  10684151 # total number of hits
itlb.misses                      20 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses                853405 # total number of accesses
dtlb.hits                    853396 # total number of hits
dtlb.misses                       9 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1034812.5550 # total power usage of rename unit
bpred_power            58477533.6044 # total power usage of bpred unit
window_power           4702961.0102 # total power usage of instruction window
lsq_power              12452535.0738 # total power usage of load/store queue
regfile_power          6929359.2771 # total power usage of arch. regfile
icache_power           32023302.2284 # total power usage of icache
dcache_power           78669106.2490 # total power usage of dcache
dcache2_power          54417564.0272 # total power usage of dcache2
alu_power              244882217.3513 # total power usage of alu
falu_power             184633417.8940 # total power usage of falu
resultbus_power        6604255.4975 # total power usage of resultbus
clock_power            279071405.8141 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      90500835.8328 # total power usage of fetch stage
dispatch_stage_power   1034812.5550 # total power usage of dispatch stage
issue_stage_power      401728639.2090 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            779265052.6879 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn        77.9265 # average total power per insn
avg_total_power_insn_nofp_nod2      54.0214 # average total power per insn
rename_power_cc1        800407.3388 # total power usage of rename unit_cc1
bpred_power_cc1        8271825.7064 # total power usage of bpred unit_cc1
window_power_cc1       4850735.2232 # total power usage of instruction window_cc1
lsq_power_cc1           394693.7294 # total power usage of lsq_cc1
regfile_power_cc1      5021709.7103 # total power usage of arch. regfile_cc1
icache_power_cc1       26464069.0610 # total power usage of icache_cc1
dcache_power_cc1       5192883.3522 # total power usage of dcache_cc1
dcache2_power_cc1         9931.3607 # total power usage of dcache2_cc1
alu_power_cc1          45266642.4466 # total power usage of alu_cc1
resultbus_power_cc1    3768929.2069 # total power usage of resultbus_cc1
clock_power_cc1        66251681.7297 # total power usage of clock_cc1
avg_rename_power_cc1         0.0619 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.6398 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.3752 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0305 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.3884 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         2.0469 # avg power usage of icache_cc1
avg_dcache_power_cc1         0.4017 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0008 # avg power usage of dcache2_cc1
avg_alu_power_cc1            3.5013 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2915 # avg power usage of resultbus_cc1
avg_clock_power_cc1          5.1244 # avg power usage of clock_cc1
fetch_stage_power_cc1  34735894.7674 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800407.3388 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  59483815.3191 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.6868 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0619 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.6010 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  166293508.8652 # total power per cycle_cc1
avg_total_power_cycle_cc1      12.8625 # average total power per cycle_cc1
avg_total_power_insn_cc1      16.6294 # average total power per insn_cc1
rename_power_cc2        800407.3388 # total power usage of rename unit_cc2
bpred_power_cc2        4135912.8532 # total power usage of bpred unit_cc2
window_power_cc2       4749013.0924 # total power usage of instruction window_cc2
lsq_power_cc2           197346.8647 # total power usage of lsq_cc2
regfile_power_cc2      2539703.0026 # total power usage of arch. regfile_cc2
icache_power_cc2       26464069.0610 # total power usage of icache_cc2
dcache_power_cc2       2596444.7185 # total power usage of dcache_cc2
dcache2_power_cc2         5040.3918 # total power usage of dcache2_cc2
alu_power_cc2          11316660.6117 # total power usage of alu_cc2
resultbus_power_cc2    3768929.2069 # total power usage of resultbus_cc2
clock_power_cc2        37180902.6470 # total power usage of clock_cc2
avg_rename_power_cc2         0.0619 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.3199 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.3673 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0153 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1964 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         2.0469 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.2008 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0004 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.8753 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2915 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.8759 # avg power usage of clock_cc2
fetch_stage_power_cc2  30599981.9142 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800407.3388 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  22633434.8860 # total power usage of issue stage_cc2
avg_fetch_power_cc2          2.3669 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0619 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.7507 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  93754429.7885 # total power per cycle_cc2
avg_total_power_cycle_cc2       7.2517 # average total power per cycle_cc2
avg_total_power_insn_cc2       9.3754 # average total power per insn_cc2
rename_power_cc3        823847.8604 # total power usage of rename unit_cc3
bpred_power_cc3        9156483.6449 # total power usage of bpred unit_cc3
window_power_cc3       4807677.3563 # total power usage of instruction window_cc3
lsq_power_cc3          1399202.9125 # total power usage of lsq_cc3
regfile_power_cc3      2660548.1483 # total power usage of arch. regfile_cc3
icache_power_cc3       27019992.3757 # total power usage of icache_cc3
dcache_power_cc3       9944067.0098 # total power usage of dcache_cc3
dcache2_power_cc3      5445805.1335 # total power usage of dcache2_cc3
alu_power_cc3          31278218.1003 # total power usage of alu_cc3
resultbus_power_cc3    3982469.1504 # total power usage of resultbus_cc3
clock_power_cc3        58432480.8308 # total power usage of clock_cc3
avg_rename_power_cc3         0.0637 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.7082 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.3719 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1082 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.2058 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         2.0899 # avg power usage of icache_cc3
avg_dcache_power_cc3         0.7692 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4212 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.4193 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.3080 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.5196 # avg power usage of clock_cc3
fetch_stage_power_cc3  36176476.0206 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  823847.8604 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  56857439.6628 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.7982 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0637 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.3978 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  154950792.5230 # total power per cycle_cc3
avg_total_power_cycle_cc3      11.9852 # average total power per cycle_cc3
avg_total_power_insn_cc3      15.4951 # average total power per insn_cc3
total_rename_access         9999993 # total number accesses of rename unit
total_bpred_access          1828785 # total number accesses of bpred unit
total_window_access        35525945 # total number accesses of instruction window
total_lsq_access             853405 # total number accesses of load/store queue
total_regfile_access       16159149 # total number accesses of arch. regfile
total_icache_access        10684171 # total number accesses of icache
total_dcache_access          853405 # total number accesses of dcache
total_dcache2_access           2395 # total number accesses of dcache2
total_alu_access            9713573 # total number accesses of alu
total_resultbus_access      8748291 # total number accesses of resultbus
avg_rename_access            0.7735 # avg number accesses of rename unit
avg_bpred_access             0.1415 # avg number accesses of bpred unit
avg_window_access            2.7479 # avg number accesses of instruction window
avg_lsq_access               0.0660 # avg number accesses of lsq
avg_regfile_access           1.2499 # avg number accesses of arch. regfile
avg_icache_access            0.8264 # avg number accesses of icache
avg_dcache_access            0.0660 # avg number accesses of dcache
avg_dcache2_access           0.0002 # avg number accesses of dcache2
avg_alu_access               0.7513 # avg number accesses of alu
avg_resultbus_access         0.6767 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         23.5896 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.3022 # maximum cycle power usage of cc2
max_cycle_power_cc3         15.8933 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  81728 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                   9472 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   29 # total number of pages allocated
mem.page_mem                   116k # total size of memory pages allocated
mem.ptab_misses                  33 # total first level page table misses
mem.ptab_accesses          49255784 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred tbit -fetch:mplat 1 ../automotive/qsort/qsort_small ../automotive/qsort/input_small.dat 

sim: simulation started @ Thu Nov  5 20:19:09 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   tbit # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                4875142 # total number of loads and stores committed
sim_num_loads               2817230 # total number of loads committed
sim_num_stores         2057912.0000 # total number of stores committed
sim_num_branches            1872077 # total number of branches committed
sim_elapsed_time                  8 # total simulation time in seconds
sim_inst_rate          1250000.0000 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              4875142 # total number of loads and stores executed
sim_total_loads             2817230 # total number of loads executed
sim_total_stores       2057912.0000 # total number of stores executed
sim_total_branches          1872077 # total number of branches executed
sim_cycle                  17965923 # total simulation time in cycles
sim_IPC                      0.5566 # instructions per cycle
sim_CPI                      1.7966 # cycles per instruction
sim_exec_BW                  0.5566 # total instructions (mis-spec + committed) per cycle
sim_IPB                      5.3417 # instruction per branch
IFQ_count                  16584169 # cumulative IFQ occupancy
IFQ_fcount                 16584169 # cumulative IFQ full count
ifq_occupancy                0.9231 # avg IFQ occupancy (insn's)
ifq_rate                     0.5566 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.6584 # avg IFQ occupant latency (cycle's)
ifq_full                     0.9231 # fraction of time (cycle's) IFQ was full
RUU_count                  35533301 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                1.9778 # avg RUU occupancy (insn's)
ruu_rate                     0.5566 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.5533 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                  19370299 # cumulative LSQ occupancy
LSQ_fcount                       24 # cumulative LSQ full count
lsq_occupancy                1.0782 # avg LSQ occupancy (insn's)
lsq_rate                     0.5566 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.9370 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   69778716 # total number of slip cycles
avg_sim_slip                 6.9779 # the average slip between issue and retirement
bpred_tbit.lookups          1955783 # total number of bpred lookups
bpred_tbit.updates          1872077 # total number of updates
bpred_tbit.addr_hits        1066506 # total number of address-predicted hits
bpred_tbit.dir_hits         1066506 # total number of direction-predicted hits (includes addr-hits)
bpred_tbit.used_tbit          59692 # total number of TBIT predictions used
bpred_tbit.tbit_hits          11095 # total number of tbit hits
bpred_tbit.misses            805571 # total number of misses
bpred_tbit.jr_hits                1 # total number of address-predicted hits for JR's
bpred_tbit.jr_seen           180045 # total number of JR's seen
bpred_tbit.jr_non_ras_hits.PP            1 # total number of address-predicted hits for non-RAS JR's
bpred_tbit.jr_non_ras_seen.PP       180045 # total number of non-RAS JR's seen
bpred_tbit.bpred_addr_rate    0.5697 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_tbit.bpred_dir_rate    0.5697 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_tbit.bpred_jr_rate    0.0000 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_tbit.bpred_jr_non_ras_rate.PP    0.0000 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_tbit.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_tbit.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_tbit.used_ras.PP            0 # total number of RAS predictions used
bpred_tbit.ras_hits.PP            0 # total number of RAS hits
bpred_tbit.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               10896540 # total number of accesses
il1.hits                   10795473 # total number of hits
il1.misses                   101067 # total number of misses
il1.replacements             100633 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0093 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0092 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                4875141 # total number of accesses
dl1.hits                    4715203 # total number of hits
dl1.misses                   159938 # total number of misses
dl1.replacements             159426 # total number of replacements
dl1.writebacks                92947 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0328 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0327 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0191 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 353952 # total number of accesses
ul2.hits                     331183 # total number of hits
ul2.misses                    22769 # total number of misses
ul2.replacements              18673 # total number of replacements
ul2.writebacks                16610 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0643 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0528 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0469 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              10896540 # total number of accesses
itlb.hits                  10896523 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               4875141 # total number of accesses
dtlb.hits                   4874702 # total number of hits
dtlb.misses                     439 # total number of misses
dtlb.replacements               311 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0001 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0001 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1438006.6683 # total power usage of rename unit
bpred_power            81262140.5280 # total power usage of bpred unit
window_power           6535376.1501 # total power usage of instruction window
lsq_power              17304417.4863 # total power usage of load/store queue
regfile_power          9629246.1871 # total power usage of arch. regfile
icache_power           44500544.4904 # total power usage of icache
dcache_power           109320957.5029 # total power usage of dcache
dcache2_power          75620284.6338 # total power usage of dcache2
alu_power              340295698.7880 # total power usage of alu
falu_power             256572153.9718 # total power usage of falu
resultbus_power        9177472.1896 # total power usage of resultbus
clock_power            387806023.8378 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      125762685.0185 # total power usage of fetch stage
dispatch_stage_power   1438006.6683 # total power usage of dispatch stage
issue_stage_power      558254206.7508 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            1082890168.4625 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn       108.2890 # average total power per insn
avg_total_power_insn_nofp_nod2      75.0698 # average total power per insn
rename_power_cc1        800406.3783 # total power usage of rename unit_cc1
bpred_power_cc1        8467640.8943 # total power usage of bpred unit_cc1
window_power_cc1       6121967.8747 # total power usage of instruction window_cc1
lsq_power_cc1          2238916.9768 # total power usage of lsq_cc1
regfile_power_cc1      5902895.2873 # total power usage of arch. regfile_cc1
icache_power_cc1       26990094.7002 # total power usage of icache_cc1
dcache_power_cc1       28879531.0650 # total power usage of dcache_cc1
dcache2_power_cc1      1098521.2973 # total power usage of dcache2_cc1
alu_power_cc1          44687966.8387 # total power usage of alu_cc1
resultbus_power_cc1    4939913.1070 # total power usage of resultbus_cc1
clock_power_cc1        79115324.1702 # total power usage of clock_cc1
avg_rename_power_cc1         0.0446 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.4713 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.3408 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.1246 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.3286 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.5023 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.6075 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0611 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.4874 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2750 # avg power usage of resultbus_cc1
avg_clock_power_cc1          4.4036 # avg power usage of clock_cc1
fetch_stage_power_cc1  35457735.5945 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800406.3783 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  87966817.1595 # total power usage of issue stage_cc1
avg_fetch_power_cc1          1.9736 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0446 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.8963 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  209243178.5898 # total power per cycle_cc1
avg_total_power_cycle_cc1      11.6467 # average total power per cycle_cc1
avg_total_power_insn_cc1      20.9243 # average total power per insn_cc1
rename_power_cc2        800406.3783 # total power usage of rename unit_cc2
bpred_power_cc2        4233820.4472 # total power usage of bpred unit_cc2
window_power_cc2       5750983.8736 # total power usage of instruction window_cc2
lsq_power_cc2          1119458.4884 # total power usage of lsq_cc2
regfile_power_cc2      2878162.2826 # total power usage of arch. regfile_cc2
icache_power_cc2       26990094.7002 # total power usage of icache_cc2
dcache_power_cc2       14832388.0248 # total power usage of dcache_cc2
dcache2_power_cc2       744908.8754 # total power usage of dcache2_cc2
alu_power_cc2          11171991.7097 # total power usage of alu_cc2
resultbus_power_cc2    4939913.1070 # total power usage of resultbus_cc2
clock_power_cc2        44452419.2666 # total power usage of clock_cc2
avg_rename_power_cc2         0.0446 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.2357 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.3201 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0623 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1602 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.5023 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.8256 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0415 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.6218 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2750 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.4743 # avg power usage of clock_cc2
fetch_stage_power_cc2  31223915.1474 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800406.3783 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  38559644.0788 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.7380 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0446 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          2.1463 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  117914547.1538 # total power per cycle_cc2
avg_total_power_cycle_cc2       6.5632 # average total power per cycle_cc2
avg_total_power_insn_cc2      11.7915 # average total power per insn_cc2
rename_power_cc3        864166.4073 # total power usage of rename unit_cc3
bpred_power_cc3        11513270.4113 # total power usage of bpred unit_cc3
window_power_cc3       5844918.2507 # total power usage of instruction window_cc3
lsq_power_cc3          2609315.9068 # total power usage of lsq_cc3
regfile_power_cc3      3173429.5950 # total power usage of arch. regfile_cc3
icache_power_cc3       28741139.6753 # total power usage of icache_cc3
dcache_power_cc3       22876530.6740 # total power usage of dcache_cc3
dcache2_power_cc3      8197089.2099 # total power usage of dcache2_cc3
alu_power_cc3          40732764.9056 # total power usage of alu_cc3
resultbus_power_cc3    5306189.6553 # total power usage of resultbus_cc3
clock_power_cc3        75253854.3965 # total power usage of clock_cc3
avg_rename_power_cc3         0.0481 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.6408 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.3253 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1452 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1766 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.5998 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.2733 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4563 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.2672 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2953 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.1887 # avg power usage of clock_cc3
fetch_stage_power_cc3  40254410.0866 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  864166.4073 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  85566808.6024 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.2406 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0481 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.7627 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  205112669.0877 # total power per cycle_cc3
avg_total_power_cycle_cc3      11.4168 # average total power per cycle_cc3
avg_total_power_insn_cc3      20.5113 # average total power per insn_cc3
total_rename_access         9999981 # total number accesses of rename unit
total_bpred_access          1872077 # total number accesses of bpred unit
total_window_access        42056172 # total number accesses of instruction window
total_lsq_access            4875141 # total number accesses of load/store queue
total_regfile_access       18195217 # total number accesses of arch. regfile
total_icache_access        10896540 # total number accesses of icache
total_dcache_access         4875141 # total number accesses of dcache
total_dcache2_access         353952 # total number accesses of dcache2
total_alu_access            9589424 # total number accesses of alu
total_resultbus_access     10945132 # total number accesses of resultbus
avg_rename_access            0.5566 # avg number accesses of rename unit
avg_bpred_access             0.1042 # avg number accesses of bpred unit
avg_window_access            2.3409 # avg number accesses of instruction window
avg_lsq_access               0.2714 # avg number accesses of lsq
avg_regfile_access           1.0128 # avg number accesses of arch. regfile
avg_icache_access            0.6065 # avg number accesses of icache
avg_dcache_access            0.2714 # avg number accesses of dcache
avg_dcache2_access           0.0197 # avg number accesses of dcache2
avg_alu_access               0.5338 # avg number accesses of alu
avg_resultbus_access         0.6092 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 8 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              7 # max number accesses of resultbus
max_cycle_power_cc1         19.7860 # maximum cycle power usage of cc1
max_cycle_power_cc2         13.0107 # maximum cycle power usage of cc2
max_cycle_power_cc3         17.1034 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                 101552 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12288 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                  390 # total number of pages allocated
mem.page_mem                  1560k # total size of memory pages allocated
mem.ptab_misses                 390 # total first level page table misses
mem.ptab_accesses          80640530 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

sim-outorder: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).


Processor Parameters:
Issue Width: 1
Window Size: 16
Number of Virtual Registers: 32
Number of Physical Registers: 16
Datapath Width: 64
Total Power Consumption: 62.2747
Branch Predictor Power Consumption: 4.52313  (7.5%)
 branch target buffer power (W): 4.16837
 local predict power (W): 0.0879711
 global predict power (W): 0.0996078
 chooser power (W): 0.0702439
 RAS power (W): 0.0969383
Rename Logic Power Consumption: 0.0800408  (0.133%)
 Instruction Decode Power (W): 0.00399788
 RAT decode_power (W): 0.0283786
 RAT wordline_power (W): 0.00699436
 RAT bitline_power (W): 0.0406699
 DCL Comparators (W): 0
Instruction Window Power Consumption: 0.363765  (0.604%)
 tagdrive (W): 0.0203623
 tagmatch (W): 0.00780062
 Selection Logic (W): 0.00335542
 decode_power (W): 0.0133126
 wordline_power (W): 0.00989977
 bitline_power (W): 0.309034
Load/Store Queue Power Consumption: 0.96318  (1.6%)
 tagdrive (W): 0.457232
 tagmatch (W): 0.100774
 decode_power (W): 0.00799577
 wordline_power (W): 0.0150119
 bitline_power (W): 0.382166
Arch. Register File Power Consumption: 0.535973  (0.889%)
 decode_power (W): 0.0283786
 wordline_power (W): 0.00989977
 bitline_power (W): 0.497694
Result Bus Power Consumption: 0.510827  (0.847%)
Total Clock Power: 21.5856  (35.8%)
Int ALU Power: 4.66013  (7.73%)
FP ALU Power: 14.281  (23.7%)
Instruction Cache Power Consumption: 2.21363  (3.67%)
 decode_power (W): 0.779481
 wordline_power (W): 0.028656
 bitline_power (W): 0.886372
 senseamp_power (W): 0.096
 tagarray_power (W): 0.423116
Itlb_power (W): 0.263317 (0.437%)
Data Cache Power Consumption: 5.18303  (8.6%)
 decode_power (W): 0.651055
 wordline_power (W): 0.196735
 bitline_power (W): 2.71235
 senseamp_power (W): 0.768
 tagarray_power (W): 0.854886
Dtlb_power (W): 0.901877 (1.5%)
Level 2 Cache Power Consumption: 4.2091 (6.98%)
 decode_power (W): 0.41817
 wordline_power (W): 0.0430878
 bitline_power (W): 3.0244
 senseamp_power (W): 0.192
 tagarray_power (W): 0.531433
sim: command line: ./sim-outorder -max:inst 10000000 -redir:sim out.txt -fetch:ifqsize 1 -decode:width 1 -issue:width 1 -issue:inorder true -issue:wrongpath false -commit:width 1 -bpred tbit -fetch:mplat 1 ../automotive/qsort/qsort_large ../automotive/qsort/input_large.dat 

sim: simulation started @ Thu Nov  5 20:19:17 2015, options follow:

sim-outorder: This simulator implements a very detailed out-of-order issue
superscalar processor with a two-level memory system and speculative
execution support.  This simulator is a performance simulator, tracking the
latency of all pipeline operations.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim          out.txt # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst            10000000 # maximum number of inst's to execute
-fastfwd                    0 # number of insts skipped before timing starts
# -ptrace              <null> # generate pipetrace, i.e., <fname|stdout|stderr> <range>
-fetch:ifqsize              1 # instruction fetch queue size (in insts)
-fetch:mplat                1 # extra branch mis-prediction latency
-fetch:speed                1 # speed of front-end of machine relative to execution core
-bpred                   tbit # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb|tbit}
-bpred:bimod     2048 # bimodal predictor config (<table size>)
-bpred:2lev      1 1024 8 0 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor>)
-bpred:comb      1024 # combining predictor config (<meta_table_size>)
-bpred:ras                  8 # return address stack size (0 for no return stack)
-bpred:btb       512 4 # BTB config (<num_sets> <associativity>)
# -bpred:spec_update       <null> # speculative predictors update in {ID|WB} (default non-spec)
-decode:width               1 # instruction decode B/W (insts/cycle)
-issue:width                1 # instruction issue B/W (insts/cycle)
-issue:inorder           true # run pipeline with in-order issue
-issue:wrongpath        false # issue instructions down wrong execution paths
-commit:width               1 # instruction commit B/W (insts/cycle)
-ruu:size                  16 # register update unit (RUU) size
-lsq:size                   8 # load/store queue (LSQ) size
-cache:dl1       dl1:128:32:4:l # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat               1 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:1024:64:4:l # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat               6 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:1:l # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat               1 # l1 instruction cache hit latency (in cycles)
-cache:il2                dl2 # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat               6 # l2 instruction cache hit latency (in cycles)
-cache:flush            false # flush caches on system calls
-cache:icompress        false # convert 64-bit inst addresses to 32-bit inst equivalents
-mem:lat         18 2 # memory access latency (<first_chunk> <inter_chunk>)
-mem:width                  8 # memory access bus width (in bytes)
-tlb:itlb        itlb:16:4096:4:l # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l # data TLB config, i.e., {<config>|none}
-tlb:lat                   30 # inst/data TLB miss latency (in cycles)
-res:ialu                   4 # total number of integer ALU's available
-res:imult                  1 # total number of integer multiplier/dividers available
-res:memport                2 # total number of memory system ports available (to CPU)
-res:fpalu                  4 # total number of floating point ALU's available
-res:fpmult                 1 # total number of floating point multiplier/dividers available
# -pcstat              <null> # profile stat(s) against text addr's (mult uses ok)
-bugcompat              false # operate in backward-compatible bugs mode (for testing only)

  Pipetrace range arguments are formatted as follows:

    {{@|#}<start>}:{{@|#|+}<end>}

  Both ends of the range are optional, if neither are specified, the entire
  execution is traced.  Ranges that start with a `@' designate an address
  range to be traced, those that start with an `#' designate a cycle count
  range.  All other range values represent an instruction count range.  The
  second argument, if specified with a `+', indicates a value relative
  to the first argument, e.g., 1000:+100 == 1000:1100.  Program symbols may
  be used in all contexts.

    Examples:   -ptrace FOO.trc #0:#1000
                -ptrace BAR.trc @2000:
                -ptrace BLAH.trc :1500
                -ptrace UXXE.trc :
                -ptrace FOOBAR.trc @main:+278

  Branch predictor configuration examples for 2-level predictor:
    Configurations:   N, M, W, X
      N   # entries in first level (# of shift register(s))
      W   width of shift register(s)
      M   # entries in 2nd level (# of counters, or other FSM)
      X   (yes-1/no-0) xor history and address for 2nd level index
    Sample predictors:
      GAg     : 1, W, 2^W, 0
      GAp     : 1, W, M (M > 2^W), 0
      PAg     : N, W, 2^W, 0
      PAp     : N, W, M (M == 2^(N+W)), 0
      gshare  : 1, W, 2^W, 1
  Predictor `comb' combines a bimodal and a 2-level predictor.

  The cache config parameter <config> has the following format:

    <name>:<nsets>:<bsize>:<assoc>:<repl>

    <name>   - name of the cache being defined
    <nsets>  - number of sets in the cache
    <bsize>  - block size of the cache
    <assoc>  - associativity of the cache
    <repl>   - block replacement strategy, 'l'-LRU, 'f'-FIFO, 'r'-random

    Examples:   -cache:dl1 dl1:4096:32:1:l
                -dtlb dtlb:128:4096:32:r

  Cache levels can be unified by pointing a level of the instruction cache
  hierarchy at the data cache hiearchy using the "dl1" and "dl2" cache
  configuration arguments.  Most sensible combinations are supported, e.g.,

    A unified l2 cache (il2 is pointed at dl2):
      -cache:il1 il1:128:64:1:l -cache:il2 dl2
      -cache:dl1 dl1:256:32:1:l -cache:dl2 ul2:1024:64:2:l

    Or, a fully unified cache hierarchy (il1 pointed at dl1):
      -cache:il1 dl1
      -cache:dl1 ul1:256:32:1:l -cache:dl2 ul2:1024:64:2:l



sim: ** starting performance simulation **

sim: ** simulation statistics **
sim_num_insn               10000000 # total number of instructions committed
sim_num_refs                3116585 # total number of loads and stores committed
sim_num_loads               2138586 # total number of loads committed
sim_num_stores          977999.0000 # total number of stores committed
sim_num_branches            2635877 # total number of branches committed
sim_elapsed_time                  7 # total simulation time in seconds
sim_inst_rate          1428571.4286 # simulation speed (in insts/sec)
sim_total_insn             10000000 # total number of instructions executed
sim_total_refs              3116585 # total number of loads and stores executed
sim_total_loads             2138586 # total number of loads executed
sim_total_stores        977999.0000 # total number of stores executed
sim_total_branches          2635877 # total number of branches executed
sim_cycle                  17517441 # total simulation time in cycles
sim_IPC                      0.5709 # instructions per cycle
sim_CPI                      1.7517 # cycles per instruction
sim_exec_BW                  0.5709 # total instructions (mis-spec + committed) per cycle
sim_IPB                      3.7938 # instruction per branch
IFQ_count                  15233417 # cumulative IFQ occupancy
IFQ_fcount                 15233417 # cumulative IFQ full count
ifq_occupancy                0.8696 # avg IFQ occupancy (insn's)
ifq_rate                     0.5709 # avg IFQ dispatch rate (insn/cycle)
ifq_latency                  1.5233 # avg IFQ occupant latency (cycle's)
ifq_full                     0.8696 # fraction of time (cycle's) IFQ was full
RUU_count                  33569969 # cumulative RUU occupancy
RUU_fcount                        0 # cumulative RUU full count
ruu_occupancy                1.9164 # avg RUU occupancy (insn's)
ruu_rate                     0.5709 # avg RUU dispatch rate (insn/cycle)
ruu_latency                  3.3570 # avg RUU occupant latency (cycle's)
ruu_full                     0.0000 # fraction of time (cycle's) RUU was full
LSQ_count                  11536280 # cumulative LSQ occupancy
LSQ_fcount                        0 # cumulative LSQ full count
lsq_occupancy                0.6586 # avg LSQ occupancy (insn's)
lsq_rate                     0.5709 # avg LSQ dispatch rate (insn/cycle)
lsq_latency                  1.1536 # avg LSQ occupant latency (cycle's)
lsq_full                     0.0000 # fraction of time (cycle's) LSQ was full
sim_slip                   58222795 # total number of slip cycles
avg_sim_slip                 5.8223 # the average slip between issue and retirement
bpred_tbit.lookups          2686260 # total number of bpred lookups
bpred_tbit.updates          2635876 # total number of updates
bpred_tbit.addr_hits        1735983 # total number of address-predicted hits
bpred_tbit.dir_hits         1735983 # total number of direction-predicted hits (includes addr-hits)
bpred_tbit.used_tbit          30296 # total number of TBIT predictions used
bpred_tbit.tbit_hits          20160 # total number of tbit hits
bpred_tbit.misses            899893 # total number of misses
bpred_tbit.jr_hits                0 # total number of address-predicted hits for JR's
bpred_tbit.jr_seen           120956 # total number of JR's seen
bpred_tbit.jr_non_ras_hits.PP            0 # total number of address-predicted hits for non-RAS JR's
bpred_tbit.jr_non_ras_seen.PP       120956 # total number of non-RAS JR's seen
bpred_tbit.bpred_addr_rate    0.6586 # branch address-prediction rate (i.e., addr-hits/updates)
bpred_tbit.bpred_dir_rate    0.6586 # branch direction-prediction rate (i.e., all-hits/updates)
bpred_tbit.bpred_jr_rate    0.0000 # JR address-prediction rate (i.e., JR addr-hits/JRs seen)
bpred_tbit.bpred_jr_non_ras_rate.PP    0.0000 # non-RAS JR addr-pred rate (ie, non-RAS JR hits/JRs seen)
bpred_tbit.retstack_pushes            0 # total number of address pushed onto ret-addr stack
bpred_tbit.retstack_pops            0 # total number of address popped off of ret-addr stack
bpred_tbit.used_ras.PP            0 # total number of RAS predictions used
bpred_tbit.ras_hits.PP            0 # total number of RAS hits
bpred_tbit.ras_rate.PP <error: divide by zero> # RAS prediction rate (i.e., RAS hits/used RAS)
il1.accesses               11122670 # total number of accesses
il1.hits                   10879636 # total number of hits
il1.misses                   243034 # total number of misses
il1.replacements             242708 # total number of replacements
il1.writebacks                    0 # total number of writebacks
il1.invalidations                 0 # total number of invalidations
il1.miss_rate                0.0219 # miss rate (i.e., misses/ref)
il1.repl_rate                0.0218 # replacement rate (i.e., repls/ref)
il1.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
il1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
dl1.accesses                3116584 # total number of accesses
dl1.hits                    3113474 # total number of hits
dl1.misses                     3110 # total number of misses
dl1.replacements               2598 # total number of replacements
dl1.writebacks                 2586 # total number of writebacks
dl1.invalidations                 0 # total number of invalidations
dl1.miss_rate                0.0010 # miss rate (i.e., misses/ref)
dl1.repl_rate                0.0008 # replacement rate (i.e., repls/ref)
dl1.wb_rate                  0.0008 # writeback rate (i.e., wrbks/ref)
dl1.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
ul2.accesses                 248730 # total number of accesses
ul2.hits                     246861 # total number of hits
ul2.misses                     1869 # total number of misses
ul2.replacements                  0 # total number of replacements
ul2.writebacks                    0 # total number of writebacks
ul2.invalidations                 0 # total number of invalidations
ul2.miss_rate                0.0075 # miss rate (i.e., misses/ref)
ul2.repl_rate                0.0000 # replacement rate (i.e., repls/ref)
ul2.wb_rate                  0.0000 # writeback rate (i.e., wrbks/ref)
ul2.inv_rate                 0.0000 # invalidation rate (i.e., invs/ref)
itlb.accesses              11122670 # total number of accesses
itlb.hits                  11122653 # total number of hits
itlb.misses                      17 # total number of misses
itlb.replacements                 0 # total number of replacements
itlb.writebacks                   0 # total number of writebacks
itlb.invalidations                0 # total number of invalidations
itlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
itlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
itlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
itlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
dtlb.accesses               3116584 # total number of accesses
dtlb.hits                   3116553 # total number of hits
dtlb.misses                      31 # total number of misses
dtlb.replacements                 0 # total number of replacements
dtlb.writebacks                   0 # total number of writebacks
dtlb.invalidations                0 # total number of invalidations
dtlb.miss_rate               0.0000 # miss rate (i.e., misses/ref)
dtlb.repl_rate               0.0000 # replacement rate (i.e., repls/ref)
dtlb.wb_rate                 0.0000 # writeback rate (i.e., wrbks/ref)
dtlb.inv_rate                0.0000 # invalidation rate (i.e., invs/ref)
rename_power           1402109.8148 # total power usage of rename unit
bpred_power            79233599.7568 # total power usage of bpred unit
window_power           6372234.0414 # total power usage of instruction window
lsq_power              16872448.5994 # total power usage of load/store queue
regfile_power          9388872.0304 # total power usage of arch. regfile
icache_power           43389680.7074 # total power usage of icache
dcache_power           106591986.5713 # total power usage of dcache
dcache2_power          73732581.0890 # total power usage of dcache2
alu_power              331800922.5617 # total power usage of alu
falu_power             250167362.3660 # total power usage of falu
resultbus_power        8948375.6340 # total power usage of resultbus
clock_power            378125250.9087 # total power usage of clock
avg_rename_power             0.0800 # avg power usage of rename unit
avg_bpred_power              4.5231 # avg power usage of bpred unit
avg_window_power             0.3638 # avg power usage of instruction window
avg_lsq_power                0.9632 # avg power usage of lsq
avg_regfile_power            0.5360 # avg power usage of arch. regfile
avg_icache_power             2.4769 # avg power usage of icache
avg_dcache_power             6.0849 # avg power usage of dcache
avg_dcache2_power            4.2091 # avg power usage of dcache2
avg_alu_power               18.9412 # avg power usage of alu
avg_falu_power              14.2810 # avg power usage of falu
avg_resultbus_power          0.5108 # avg power usage of resultbus
avg_clock_power             21.5856 # avg power usage of clock
fetch_stage_power      122623280.4642 # total power usage of fetch stage
dispatch_stage_power   1402109.8148 # total power usage of dispatch stage
issue_stage_power      544318548.4968 # total power usage of issue stage
avg_fetch_power              7.0001 # average power of fetch unit per cycle
avg_dispatch_power           0.0800 # average power of dispatch unit per cycle
avg_issue_power             31.0729 # average power of issue unit per cycle
total_power            1055858061.7150 # total power per cycle
avg_total_power_cycle       60.2747 # average total power per cycle
avg_total_power_cycle_nofp_nod2      41.7845 # average total power per cycle
avg_total_power_insn       105.5858 # average total power per insn
avg_total_power_insn_nofp_nod2      73.1958 # average total power per insn
rename_power_cc1        800405.5779 # total power usage of rename unit_cc1
bpred_power_cc1        11922400.3120 # total power usage of bpred unit_cc1
window_power_cc1       5574717.4674 # total power usage of instruction window_cc1
lsq_power_cc1          1502015.5089 # total power usage of lsq_cc1
regfile_power_cc1      5159351.1629 # total power usage of arch. regfile_cc1
icache_power_cc1       27550205.5346 # total power usage of icache_cc1
dcache_power_cc1       18943706.6691 # total power usage of dcache_cc1
dcache2_power_cc1      1036009.9163 # total power usage of dcache2_cc1
alu_power_cc1          46069053.9241 # total power usage of alu_cc1
resultbus_power_cc1    4313402.8150 # total power usage of resultbus_cc1
clock_power_cc1        75997870.6176 # total power usage of clock_cc1
avg_rename_power_cc1         0.0457 # avg power usage of rename unit_cc1
avg_bpred_power_cc1          0.6806 # avg power usage of bpred unit_cc1
avg_window_power_cc1         0.3182 # avg power usage of instruction window_cc1
avg_lsq_power_cc1            0.0857 # avg power usage of lsq_cc1
avg_regfile_power_cc1        0.2945 # avg power usage of arch. regfile_cc1
avg_icache_power_cc1         1.5727 # avg power usage of icache_cc1
avg_dcache_power_cc1         1.0814 # avg power usage of dcache_cc1
avg_dcache2_power_cc1        0.0591 # avg power usage of dcache2_cc1
avg_alu_power_cc1            2.6299 # avg power usage of alu_cc1
avg_resultbus_power_cc1       0.2462 # avg power usage of resultbus_cc1
avg_clock_power_cc1          4.3384 # avg power usage of clock_cc1
fetch_stage_power_cc1  39472605.8467 # total power usage of fetch stage_cc1
dispatch_stage_power_cc1  800405.5779 # total power usage of dispatch stage_cc1
issue_stage_power_cc1  77438906.3009 # total power usage of issue stage_cc1
avg_fetch_power_cc1          2.2533 # average power of fetch unit per cycle_cc1
avg_dispatch_power_cc1       0.0457 # average power of dispatch unit per cycle_cc1
avg_issue_power_cc1          4.4207 # average power of issue unit per cycle_cc1
total_power_cycle_cc1  198869139.5060 # total power per cycle_cc1
avg_total_power_cycle_cc1      11.3526 # average total power per cycle_cc1
avg_total_power_insn_cc1      19.8869 # average total power per insn_cc1
rename_power_cc2        800405.5779 # total power usage of rename unit_cc2
bpred_power_cc2        5961200.1560 # total power usage of bpred unit_cc2
window_power_cc2       5257758.7733 # total power usage of instruction window_cc2
lsq_power_cc2           751007.7545 # total power usage of lsq_cc2
regfile_power_cc2      2352094.8270 # total power usage of arch. regfile_cc2
icache_power_cc2       27550205.5346 # total power usage of icache_cc2
dcache_power_cc2       9482060.7648 # total power usage of dcache_cc2
dcache2_power_cc2       523464.1549 # total power usage of dcache2_cc2
alu_power_cc2          11517263.4810 # total power usage of alu_cc2
resultbus_power_cc2    4313402.8150 # total power usage of resultbus_cc2
clock_power_cc2        42405565.2453 # total power usage of clock_cc2
avg_rename_power_cc2         0.0457 # avg power usage of rename unit_cc2
avg_bpred_power_cc2          0.3403 # avg power usage of bpred unit_cc2
avg_window_power_cc2         0.3001 # avg power usage of instruction window_cc2
avg_lsq_power_cc2            0.0429 # avg power usage of instruction lsq_cc2
avg_regfile_power_cc2        0.1343 # avg power usage of arch. regfile_cc2
avg_icache_power_cc2         1.5727 # avg power usage of icache_cc2
avg_dcache_power_cc2         0.5413 # avg power usage of dcache_cc2
avg_dcache2_power_cc2        0.0299 # avg power usage of dcache2_cc2
avg_alu_power_cc2            0.6575 # avg power usage of alu_cc2
avg_resultbus_power_cc2       0.2462 # avg power usage of resultbus_cc2
avg_clock_power_cc2          2.4208 # avg power usage of clock_cc2
fetch_stage_power_cc2  33511405.6907 # total power usage of fetch stage_cc2
dispatch_stage_power_cc2  800405.5779 # total power usage of dispatch stage_cc2
issue_stage_power_cc2  31844957.7436 # total power usage of issue stage_cc2
avg_fetch_power_cc2          1.9130 # average power of fetch unit per cycle_cc2
avg_dispatch_power_cc2       0.0457 # average power of dispatch unit per cycle_cc2
avg_issue_power_cc2          1.8179 # average power of issue unit per cycle_cc2
total_power_cycle_cc2  110914429.0845 # total power per cycle_cc2
avg_total_power_cycle_cc2       6.3317 # average total power per cycle_cc2
avg_total_power_insn_cc2      11.0914 # average total power per insn_cc2
rename_power_cc3        860576.0016 # total power usage of rename unit_cc3
bpred_power_cc3        12692320.1012 # total power usage of bpred unit_cc3
window_power_cc3       5387825.1811 # total power usage of instruction window_cc3
lsq_power_cc3          2279292.2475 # total power usage of lsq_cc3
regfile_power_cc3      2706723.8614 # total power usage of arch. regfile_cc3
icache_power_cc3       29134153.0485 # total power usage of icache_cc3
dcache_power_cc3       18246888.7601 # total power usage of dcache_cc3
dcache2_power_cc3      7793121.6955 # total power usage of dcache2_cc3
alu_power_cc3          40090450.3455 # total power usage of alu_cc3
resultbus_power_cc3    4725049.6071 # total power usage of resultbus_cc3
clock_power_cc3        72569312.3470 # total power usage of clock_cc3
avg_rename_power_cc3         0.0491 # avg power usage of rename unit_cc3
avg_bpred_power_cc3          0.7246 # avg power usage of bpred unit_cc3
avg_window_power_cc3         0.3076 # avg power usage of instruction window_cc3
avg_lsq_power_cc3            0.1301 # avg power usage of instruction lsq_cc3
avg_regfile_power_cc3        0.1545 # avg power usage of arch. regfile_cc3
avg_icache_power_cc3         1.6632 # avg power usage of icache_cc3
avg_dcache_power_cc3         1.0416 # avg power usage of dcache_cc3
avg_dcache2_power_cc3        0.4449 # avg power usage of dcache2_cc3
avg_alu_power_cc3            2.2886 # avg power usage of alu_cc3
avg_resultbus_power_cc3       0.2697 # avg power usage of resultbus_cc3
avg_clock_power_cc3          4.1427 # avg power usage of clock_cc3
fetch_stage_power_cc3  41826473.1497 # total power usage of fetch stage_cc3
dispatch_stage_power_cc3  860576.0016 # total power usage of dispatch stage_cc3
issue_stage_power_cc3  78522627.8368 # total power usage of issue stage_cc3
avg_fetch_power_cc3          2.3877 # average power of fetch unit per cycle_cc3
avg_dispatch_power_cc3       0.0491 # average power of dispatch unit per cycle_cc3
avg_issue_power_cc3          4.4825 # average power of issue unit per cycle_cc3
total_power_cycle_cc3  196485713.1965 # total power per cycle_cc3
avg_total_power_cycle_cc3      11.2166 # average total power per cycle_cc3
avg_total_power_insn_cc3      19.6486 # average total power per insn_cc3
total_rename_access         9999971 # total number accesses of rename unit
total_bpred_access          2635876 # total number accesses of bpred unit
total_window_access        38109718 # total number accesses of instruction window
total_lsq_access            3116585 # total number accesses of load/store queue
total_regfile_access       15061047 # total number accesses of arch. regfile
total_icache_access        11122670 # total number accesses of icache
total_dcache_access         3116584 # total number accesses of dcache
total_dcache2_access         248730 # total number accesses of dcache2
total_alu_access            9574096 # total number accesses of alu
total_resultbus_access      9502680 # total number accesses of resultbus
avg_rename_access            0.5709 # avg number accesses of rename unit
avg_bpred_access             0.1505 # avg number accesses of bpred unit
avg_window_access            2.1755 # avg number accesses of instruction window
avg_lsq_access               0.1779 # avg number accesses of lsq
avg_regfile_access           0.8598 # avg number accesses of arch. regfile
avg_icache_access            0.6349 # avg number accesses of icache
avg_dcache_access            0.1779 # avg number accesses of dcache
avg_dcache2_access           0.0142 # avg number accesses of dcache2
avg_alu_access               0.5465 # avg number accesses of alu
avg_resultbus_access         0.5425 # avg number accesses of resultbus
max_rename_access                 1 # max number accesses of rename unit
max_bpred_access                  1 # max number accesses of bpred unit
max_window_access                 5 # max number accesses of instruction window
max_lsq_access                    1 # max number accesses of load/store queue
max_regfile_access                3 # max number accesses of arch. regfile
max_icache_access                 1 # max number accesses of icache
max_dcache_access                 2 # max number accesses of dcache
max_dcache2_access                3 # max number accesses of dcache2
max_alu_access                    1 # max number accesses of alu
max_resultbus_access              3 # max number accesses of resultbus
max_cycle_power_cc1         28.2065 # maximum cycle power usage of cc1
max_cycle_power_cc2         12.5288 # maximum cycle power usage of cc2
max_cycle_power_cc3         16.5668 # maximum cycle power usage of cc3
sim_invalid_addrs                 0 # total non-speculative bogus addresses seen (debug var)
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                 103072 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                  12288 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   57 # total number of pages allocated
mem.page_mem                   228k # total size of memory pages allocated
mem.ptab_misses                  57 # total first level page table misses
mem.ptab_accesses          65873732 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

